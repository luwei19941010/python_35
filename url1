<!DOCTYPE html>
<!--STATUS OK--><html> <head><meta http-equiv=content-type content=text/html;charset=utf-8><meta http-equiv=X-UA-Compatible content=IE=Edge><meta content=always name=referrer><link rel=stylesheet type=text/css href=http://s1.bdstatic.com/r/www/cache/bdorz/baidu.min.css><title>ç¾åº¦ä¸ä¸ï¼ä½ å°±ç¥é</title></head> <body link=#0000cc> <div id=wrapper> <div id=head> <div class=head_wrapper> <div class=s_form> <div class=s_form_wrapper> <div id=lg> <img hidefocus=true src=//www.baidu.com/img/bd_logo1.png width=270 height=129> </div> <form id=form name=f action=//www.baidu.com/s class=fm> <input type=hidden name=bdorz_come value=1> <input type=hidden name=ie value=utf-8> <input type=hidden name=f value=8> <input type=hidden name=rsv_bp value=1> <input type=hidden name=rsv_idx value=1> <input type=hidden name=tn value=baidu><span class="bg s_ipt_wr"><input id=kw name=wd class=s_ipt value maxlength=255 autocomplete=off autofocus></span><span class="bg s_btn_wr"><input type=submit id=su value=ç¾åº¦ä¸ä¸ class="bg s_btn"></span> </form> </div> </div> <div id=u1> <a href=http://news.baidu.com name=tj_trnews class=mnav>æ°é»</a> <a href=http://www.hao123.com name=tj_trhao123 class=mnav>hao123</a> <a href=http://map.baidu.com name=tj_trmap class=mnav>å°å¾</a> <a href=http://v.baidu.com name=tj_trvideo class=mnav>è§é¢</a> <a href=http://tieba.baidu.com name=tj_trtieba class=mnav>è´´å§</a> <noscript> <a href=http://www.baidu.com/bdorz/login.gif?login&amp;tpl=mn&amp;u=http%3A%2F%2Fwww.baidu.com%2f%3fbdorz_come%3d1 name=tj_login class=lb>ç»å½</a> </noscript> <script>document.write('<a href="http://www.baidu.com/bdorz/login.gif?login&tpl=mn&u='+ encodeURIComponent(window.location.href+ (window.location.search === "" ? "?" : "&")+ "bdorz_come=1")+ '" name="tj_login" class="lb">ç»å½</a>');</script> <a href=//www.baidu.com/more/ name=tj_briicon class=bri style="display: block;">æ´å¤äº§å</a> </div> </div> </div> <div id=ftCon> <div id=ftConw> <p id=lh> <a href=http://home.baidu.com>å³äºç¾åº¦</a> <a href=http://ir.baidu.com>About Baidu</a> </p> <p id=cp>&copy;2017&nbsp;Baidu&nbsp;<a href=http://www.baidu.com/duty/>ä½¿ç¨ç¾åº¦åå¿è¯»</a>&nbsp; <a href=http://jianyi.baidu.com/ class=cp-feedback>æè§åé¦</a>&nbsp;äº¬ICPè¯030173å·&nbsp; <img src=//www.baidu.com/img/gs.gif> </p> </div> </div> </div> </body> </html>
<!DOCTYPE html>
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
      <title>Tencent 腾讯</title>
    <meta name="keywords" content="腾讯，腾讯集团，腾讯官网，微信，QQ，腾讯游戏，腾讯云，Tencent, Tencent Games, WeChat, Tencent Cloud" />
  <meta name="description" content="腾讯于1998年11月成立，是一家以互联网为基础的平台公司，通过技术丰富互联网用户的生活，助力企业数字化升级。我们的使命是“用户为本 科技向善”。Founded in 1998, Tencent is an Internet-based platform company using technology to enrich the lives of Internet users and assist the digital upgrade of enterprises. Our mission is "Value for Users, Tech for Good"." />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=0, minimum-scale=1.0, maximum-scale=1.0" />
  <meta name="format-detection" content="telephone=no" />
  <meta http-equiv="X-UA-Compatible" content="IE=Edge,chrome=1">

  <script>
    window.windowLoadList = [];
    window.windowLoad = function (call){
      windowLoadList.push(call);
    }

    var _locale = 'zh-cn';
  </script>
  <script src="https://js.aq.qq.com/js/aq_common.js"></script>
  <script type="text/javascript" src="/js/jquery.min.js"></script>
  <script type="text/javascript" src="/js/js.js"></script>
  <script type="text/javascript" src="/js/js-2.js"></script>

  <link rel="stylesheet" type="text/css" href="/css/base.css"/>
  <link rel="stylesheet" type="text/css" href="/css/base-2.css"/>
  <link rel="stylesheet" type="text/css" href="/css/index.css"/>
</head>
<body>

<div class="wrap">
  <!-- 页头区域 -->
  <div class="wrap_head ">
    <!-- 点击搜索icon 添加类名 search_area_show 隐藏菜单，显示输入框 -->
    <!-- 添加类名 submenu_show 显示子菜单 -->

    <div class="head_con">
      <a class="logo" href="https://www.tencent.com/zh-cn/index.html"><h1>Tencent腾讯</h1></a>
      <ul class="menu_list">
        <li class="menu_item">
          <a class="txt" href="https://www.tencent.com/zh-cn/about.html">简介</a>
          <ul class="sub_list">
            <li><a href="https://www.tencent.com/zh-cn/about.html#about-con-1">公司简介</a></li>
            <li><a href="https://www.tencent.com/zh-cn/about.html#about-con-2">愿景及使命</a></li>
            <li><a href="https://www.tencent.com/zh-cn/about.html#about-con-3">发展历程</a></li>
            <li><a href="https://www.tencent.com/zh-cn/about.html#about-con-4">业务架构</a></li>
            <li><a href="https://www.tencent.com/zh-cn/about.html#about-con-5">管理团队</a></li>
            <li><a href="https://www.tencent.com/zh-cn/about.html#about-con-6">企业文化</a></li>
            <li><a href="https://www.tencent.com/zh-cn/about.html#about-con-7">办公地点</a></li>
          </ul>
        </li>
        <li class="menu_item">
          <a class="txt" href="https://www.tencent.com/zh-cn/business.html">业务</a>
          <ul class="sub_list">
            <li><a href="https://www.tencent.com/zh-cn/business.html">面向用户</a></li>
            <li><a href="https://www.tencent.com/zh-cn/business.html?page-active=to-b">面向企业</a></li>
            <li><a href="https://www.tencent.com/zh-cn/business.html?page-active=innovation">创新科技</a></li>
          </ul>
        </li>
        <li class="menu_item">
          <a class="txt" href="https://www.tencent.com/zh-cn/employees.html">员工</a>
          <ul class="sub_list">
            <li><a href="https://www.tencent.com/zh-cn/employees.html#staff-con-1">人才发展</a></li>
            <li><a href="https://www.tencent.com/zh-cn/employees.html#staff-con-2">腾讯学院</a></li>
            <li><a href="https://www.tencent.com/zh-cn/employees.html#staff-con-3">工作环境</a></li>
            <li><a href="https://www.tencent.com/zh-cn/employees.html#staff-con-4">员工活动</a></li>
          </ul>
        </li>
        <li class="menu_item">
          <a class="txt" href="https://www.tencent.com/zh-cn/responsibility.html">企业责任</a>
          <ul class="sub_list">
            <li><a href="https://www.tencent.com/zh-cn/responsibility.html#respon-con-1">践行承诺</a></li>
            <li><a href="https://www.tencent.com/zh-cn/responsibility.html#respon-con-2">支持善举</a></li>
            <li><a href="https://www.tencent.com/zh-cn/responsibility.html#respon-con-3">鼓励创新</a></li>
            <li><a href="https://www.tencent.com/zh-cn/responsibility.html#respon-con-4">企业社会责任报告</a></li>
          </ul>
        </li>
        <li class="menu_item">
          <a class="txt" href="https://www.tencent.com/zh-cn/investors.html">投资者</a>
          <ul class="sub_list">
            <li><a href="https://www.tencent.com/zh-cn/investors.html#investors-con-1">财务新闻</a></li>
            <li><a href="https://www.tencent.com/zh-cn/investors.html#investors-con-2">公告及财务报告</a></li>
            <li><a href="https://www.tencent.com/zh-cn/investors.html#investors-con-3">业绩电话会及路演</a></li>
            <li><a href="https://www.tencent.com/zh-cn/investors.html#investors-con-4">投资者工具包</a></li>
            <li><a href="https://www.tencent.com/zh-cn/investors.html#investors-con-5">证券及债券信息</a></li>
            <li><a href="https://www.tencent.com/zh-cn/investors.html#investors-con-6">企业管治</a></li>
          </ul>
        </li>
        <li class="menu_item">
          <a class="txt" href="https://www.tencent.com/zh-cn/media.html">媒体</a>
          <ul class="sub_list">
            <li><a href="https://www.tencent.com/zh-cn/media.html#media-con-1">企业动态</a></li>
            <li><a href="https://www.tencent.com/zh-cn/media.html#media-con-2">财务新闻</a></li>
            <li><a href="https://www.tencent.com/zh-cn/media.html#media-con-3">腾讯视角</a></li>
            <li><a href="https://www.tencent.com/zh-cn/media.html#media-con-4">媒体资料库</a></li>
          </ul>
        </li>
        <li class="menu_item menu_item_lan"><a class="cn" lang="zh-cn">简体</a><i class="s_line s_line_1">|</i><a class="hk" lang="zh-hk">繁体</a><i class="s_line s_line_2" style="display: none;">|</i><a class="en" style="display: none;" lang="en-us">English</a></li>

      </ul>
      <!--<div class="search_area">
        <a href="##" class="search_icon"></a>
        <input type="text" class="ipt_search" value="" placeholder="请输入您想搜索的关键字" />
      </div>-->
      <div class="lang_area">
        <a class="lang_ch current" lang="zh-cn">简</a>
        <i class="s_line">|</i>
        <a class="lang_hk" lang="zh-hk">繁</a>
        <i class="s_line">|</i>
        <a class="lang_en" lang="en-us">EN</a>
      </div>
    </div>
    <div class="icon_menu">
      <a class="i_menu"></a>
      <a class="i_close"></a>
    </div>
    <div class="bg_hover"></div>
  </div>
  <!-- 页头区域 -->



  <!-- 内容区域 -->


  <div class="wrap_content">

    <div class="banner_area">
      <video width="100%" id="video" autoplay loop preload muted preload="auto" x-webkit-airplay="true" airplay="allow" webkit-playsinline="true" playsinline="true" src="../video/index-video.mp4" class="video1 video"></video>
      <div class="banner_txt">
        <div class="txtbox">
          <p class="ltxt">连接</p>
          <p class="rtxt">共生未来</p>
        </div>
        <div class="hook_area">
          <i class="word word_1">你我</i>
          <i class="word word_2">企业</i>
          <i class="word word_3">科技</i>
          <i class="word word_4">公益</i>
        </div>
      </div>
      <div class="slide_tips">
        <i class="s_line"></i>
        <span class="txt">滑动</span>
      </div>
      <div class="banner_bg"></div>
    </div>

    <div class="descript_area">
      <p class="txt">腾讯是一家以互联网为基础的平台公司，<span class="pc"></span>通过技术丰富互联网用户的生活，<span class="m"></span>助力企业数字化升级。<span class="pc"></span>我们的使命是“用户为本 科技向善”。</p>
    </div>

    <div class="details_area">
      <div class="details_con">
        <ul class="detail_list">
          <li>
            <a href="https://www.tencent.com/zh-cn/about.html#about-con-1">
              <p>公司简介</p>
              <img src="/data/index/index_detail_1.jpg" alt="公司简介"/>
            </a>
          </li>
          <li>
            <a href="https://www.tencent.com/zh-cn/about.html#about-con-6">
              <p>企业文化</p>
              <img src="/data/index/index_detail_2.jpg" alt="企业文化"/>
            </a>
          </li>
          <li class="last">
            <a href="https://www.tencent.com/zh-cn/about.html#about-con-7">
              <p>办公地点</p>
              <img src="/data/index/index_detail_3.jpg" alt="办公地点"/>
            </a>
          </li>
        </ul>
      </div>
    </div>

    <div class="link_area">
      <div class="link_hook">
        <div class="link_tab">
          <ul class="tab_list">
            <li class="list_item_1 current" data-num="1">
              <a class="block-link" href="https://www.tencent.com/zh-cn/business.html">
                <h3 class="tit">连接用户与生活</h3>
                <p class="txt">让生活更便捷更多彩</p>
                <i class="icon icon_arrow_r"></i></a>
            </li>
            <li class="list_item_2" data-num="2">
              <a class="block-link" href="https://www.tencent.com/zh-cn/business.html?page-active=to-b"><h3
                  class="tit">连接企业与科技</h3>
                <p class="txt">数字化助手，助力产业升级</p>
                <i class="icon icon_arrow_r"></i></a>
            </li>
            <li class="list_item_3" data-num="3">
              <a class="block-link" href="https://www.tencent.com/zh-cn/business.html?page-active=innovation"><h3
                  class="tit">连接现在与未来</h3>
                <p class="txt">探索面向未来的创新科技</p>
                <i class="icon icon_arrow_r"></i></a>
            </li>
          </ul>
        </div>
        <div class="link_content">
          <div class="con con_1">
            <ul class="link_con_list">
              <li class="item_1">
                <a href="https://www.tencent.com/zh-cn/business.html#business-con-1">
                  <div class="script">
                    <h4 class="tit">通信与社交</h4>
                    <p class="txt">连接人与人，提供功能丰富的即时通信和社交平台，让沟通更便捷。</p>
                    <i class="icon icon_arrow_r"></i>
                  </div>
                </a>
              </li>
              <li class="item_2">
                <a href="https://www.tencent.com/zh-cn/business.html#business-con-2">
                  <div class="script">
                    <h4 class="tit">数字内容</h4>
                    <p class="txt">基于优质内容，以技术为驱动引擎，探索社交和内容融合的下一代形态。</p>
                    <i class="icon icon_arrow_r"></i>
                  </div>
                </a>
              </li>
              <li class="item_3">
                <a href="https://www.tencent.com/zh-cn/business.html#business-con-3">
                  <div class="script">
                    <h4 class="tit">金融科技服务</h4>
                    <p class="txt">连接用户、商户和金融机构，提供安全、专业、便捷的金融产品与服务。</p>
                    <i class="icon icon_arrow_r"></i>
                  </div>
                </a>
              </li>
              <li class="item_4">
                <a href="https://www.tencent.com/zh-cn/business.html#business-con-4">
                  <div class="script">
                    <h4 class="tit">工具</h4>
                    <p class="txt">提供多种工具性软件，帮助用户快速直接解决各项具体需求。</p>
                    <i class="icon icon_arrow_r"></i>
                  </div>
                </a>
              </li>
            </ul>
          </div>
          <div class="con con_2">
            <ul class="link_con_list">
              <li class="item_1">
                <a
                  href="https://www.tencent.com/zh-cn/business.html?page-active=to-b#business-con-5">
                  <div class="script">
                    <h4 class="tit">腾讯广告营销</h4>
                    <p class="txt">大数据营销平台，汇聚腾讯全量应用场景，提供一体化数字化营销方案。</p>
                    <i class="icon icon_arrow_r"></i>
                  </div>
                </a>
              </li>
              <li class="item_2">
                <a
                  href="https://www.tencent.com/zh-cn/business.html?page-active=to-b#business-con-6">
                  <div class="script">
                    <h4 class="tit">腾讯云</h4>
                    <p class="txt">提供领先的云产品与云服务，辅助企业走向数字化和全球化。</p>
                    <i class="icon icon_arrow_r"></i>
                  </div>
                </a>
              </li>
              <li class="item_3">
                <a
                  href="https://www.tencent.com/zh-cn/business.html?page-active=to-b#business-con-7">
                  <div class="script">
                    <h4 class="tit">智慧产业</h4>
                    <p
                      class="txt">通过云、AI、大数据分析、安全、支付、小程序、LBS等互联网前沿技术和产品，<br>打造智慧产业方案，助力产业数字化升级。</p>
                    <i class="icon icon_arrow_r"></i>
                  </div>
                </a>
              </li>
            </ul>
          </div>

          <div class="con con_3">
            <ul class="link_con_list">
              <li class="item_1">
                <a
                  href="https://www.tencent.com/zh-cn/business.html?page-active=innovation#business-con-8">
                  <div class="script">
                    <h4 class="tit">人工智能</h4>
                    <p class="txt">运用多种技术资产，提升人工智能实力，惠及人类和世界。</p>
                    <i class="icon icon_arrow_r"></i>
                  </div>
                </a>
              </li>
              <li class="item_2">
                <a
                  href="https://www.tencent.com/zh-cn/business.html?page-active=innovation#business-con-9">
                  <div class="script">
                    <h4 class="tit">物联网</h4>
                    <p class="txt">通过腾讯云物联网，致力提供IoT全栈产品和解决方案。</p>
                    <i class="icon icon_arrow_r"></i>
                  </div>
                </a>
              </li>
              <li class="item_3">
                <a
                  href="https://www.tencent.com/zh-cn/business.html?page-active=innovation#business-con-9">
                  <div class="script">
                    <h4 class="tit">多媒体</h4>
                    <p class="txt">腾讯多媒体实验室专注音视频通信技术的前瞻性研究。</p>
                    <i class="icon icon_arrow_r"></i>
                  </div>
                </a>
              </li>
              <li class="item_4">
                <a
                  href="https://www.tencent.com/zh-cn/business.html?page-active=innovation#business-con-10">
                  <div class="script">
                    <h4 class="tit">腾讯探索</h4>
                    <p
                      class="txt">携手合作伙伴探索未来和相关技术，帮助解决全球在食物、能源和水源方面的挑战。</p>
                    <i class="icon icon_arrow_r"></i>
                  </div>
                </a>
              </li>
            </ul>
          </div>
        </div>
      </div>
    </div>


    <div class="resp_area">
      <div class="resp_details">
        <h3 class="tit">连接<br/>责任与信任</h3>
        <p class="txt">聚合微小善行，以科技让世界更美好</p>
        <a href="https://www.tencent.com/zh-cn/responsibility.html"><i
            class="icon icon_arrow_r"></i></a>
      </div>
      <div class="public_welfare">
        <div class="slide_area">
          <ul class="slide_list">
            <li class="active">

              <h4 class="tit">99 公益日</h4>
              <p
                class="txt">每年一度于9月举行的全民公益活动，透过网上平台将大众在活动期间网上作出的捐款进行匹配。</p>
              <div class="img img1"></div>
              <span class="shadow_bg"></span>
            </li>
            <li>
              <h4 class="tit">腾讯长城保护项目</h4>
              <p
                class="txt">腾讯公益慈善基金会与中国文物保护基金会共同合作，吸引公众关注和参与长城保护的文化遗产类公益项目。</p>
              <div class="img img2"></div>
              <span class="shadow_bg"></span>
            </li>
            <li>
              <h4 class="tit">腾讯为村</h4>
              <p
                class="txt">根据乡村使用场景定制微信公众号，形成由村、乡镇、区县、州市组成的公众号集群服务村民，打造手机上的“为村服务中心”。</p>
              <div class="img img3"></div>
              <span class="shadow_bg"></span>
            </li>
          </ul>
          <i class="icon_arrow icon_arrow_l"></i>
          <i class="icon_arrow icon_arrow_r"></i>
        </div>
        <i class="hook_tri"></i>
      </div>
    </div>

    <div class="develop_area">
      <div class="develop_con">
        <div class="develop_details">
          <h3 class="tit">连接<br/>人才与发展</h3>
          <p class="txt">激发活力，助力成长</p>
          <a href="https://www.tencent.com/zh-cn/employees.html"><i
              class="icon icon_arrow_r"></i></a>
        </div>
      </div>
      <div class="slide_area dev_bg">
        <ul class="slide_list">
          <li class="li1 active"></li>
          <li class="li2"></li>
          <li class="li3"></li>
        </ul>
        <div class="slide-tab">
          <div class="li active"></div>
          <div class="li"></div>
          <div class="li"></div>
        </div>
      </div>
    </div>
  </div>
  <!-- 内容区域 -->
  
  <script>
	if($(document).scrollTop()>=$('.wrap_head').height()){
		$('.wrap_head').addClass('head_white');
	}else{
		$('.wrap_head').removeClass('head_white');
	}
	$(window).scroll(function(event){
		if($(document).scrollTop()>=$('.wrap_head').height()){
			$('.wrap_head').addClass('head_white');
		}else{
			$('.wrap_head').removeClass('head_white');
		}
	})
</script>



<!-- 页脚区域 -->
<div class="wrap_footer">
  <div class="footer_con">
    <div class="focus_us">
      <h3 class="tit">关注我们</h3>
      <ul class="focus_list">
        <li>
          <a href="##" class="wechat-btn">
            <i class="icon i_wechat"></i>
            <img class="wechat-code" src="/img/index/wechat-code.jpg" alt="img" />
          </a>
        </li>
        <li>
          <a href="https://weibo.com/tencent" target="_blank">
            <i class="icon i_weibo"></i>
          </a>
        </li>
        <li>
          <a href="https://twitter.com/TencentGlobal" target="_blank">
            <i class="icon i_twitter"></i>
          </a>
        </li>
        <li>
          <a href="https://www.linkedin.com/company/tencent/" target="_blank">
            <i class="icon i_in"></i>
          </a>
        </li>
      </ul>
    </div>

    <div class="join_us">
      <!-- 添加类名 sublist_show 显示子菜单 -->
      <div class="tit_area">
        <h3 class="tit">加入我们</h3>
        <i class="icon icon_arrow"></i>
      </div>
      <ul class="join_list">
        <li>
          <a target="_blank" href="https://careers.tencent.com/">社会招聘</a>
        </li>
        <li>
          <a target="_blank" href="https://join.qq.com/">校园招聘</a>
        </li>
        <li>
          <a target="_blank" href="https://careers.tencent.com/en-us/home.html">国际招聘</a>
        </li>
      </ul>
    </div>

    <div class="contact_us">
      <div class="tit_area">
        <h3 class="tit">联系我们</h3>
        <i class="icon icon_arrow"></i>
      </div>
      <ul class="contact_list">
        <li>
          <a target="_blank" href="https://www.tencent.com/zh-cn/customer-service.html">客户服务</a>
        </li>
        <li>
          <a target="_blank" href="https://www.tencent.com/zh-cn/partnership.html">合作洽谈</a>
        </li>
        <li>
          <a target="_blank" href="https://spd.tencent.com/portal">腾讯采购</a>
        </li>
		<li>
			<a target="_blank" href="https://www.tencent.com/zh-cn/enquiry.html">媒体及投资者</a>
		</li>
      </ul>
    </div>

    <div class="legal_info">
      <div class="tit_area">
        <h3 class="tit">法律信息</h3>
        <i class="icon icon_arrow"></i>
      </div>
      <ul class="legal_list">
        <li>
          <a target="_blank" href="https://www.tencent.com/zh-cn/service-agreement.html">服务协议</a>
        </li>
        <li>
          <a target="_blank" href="https://www.tencent.com/zh-cn/privacy-policy.html">隐私政策</a>
        </li>
        <li>
          <a target="_blank" href="https://ipr.tencent.com/">知识产权</a>
        </li>
      </ul>
    </div>

    <div class="logo_tencent">
      <img src="/img/index/tencent_logo.png" alt="Tencent腾讯" />
    </div>

    <div class="footer_area">
      <ul class="links">
        <li>
          <a target="_blank" href="https://www.tencent.com/zh-cn/statement.html">法律声明</a>
        </li>
        <li>
          <a target="_blank" href="https://www.tencent.com/zh-cn/integrity-policy.html">阳光准则</a>
        </li>
        <li>
          <a target="_blank" href="https://www.tencent.com/zh-cn/sitemap.html">网站地图</a>
        </li>
        <li class="num">
          <a href="http://beian.miit.gov.cn/">粤网文【2017】6138-1456号</a>
        </li>
		<li class="num">
			<a href="http://beian.miit.gov.cn/">粤B2-20090059-1</a>
		</li>

      </ul>
		<p class="copyright"><a href="http://beian.miit.gov.cn/" class="flag_num">粤网文【2017】6138-1456号<span>粤B2-20090059-1</span></a>Copyright © 1998 - 2020 Tencent. All Rights Reserved. <br class="flag_m"/>腾讯公司 版权所有</p>

    </div>

    <div class="back_to_top">
      <a class="back">回到顶部</a>
    </div>

  </div>
</div>
<!-- 页脚区域 -->
</div>
<link rel="stylesheet" type="text/css" href="/css/rem.css"/>
<link rel="stylesheet" type="text/css" href="/css/rem-2.css"/>
<script>
  /* 中文/繁体/英文路由状态控制 */
  var host = window.location.host;
  var url = window.location.href;

  $('.lang_area a,.menu_list .menu_item.menu_item_lan a').on('click',function(){

    var targetLocale = $(this).attr('lang');

    if($(this).attr('lang') != _locale){
      window.location.pathname = window.location.pathname.replace(/^\/(zh\-(cn|hk)|en\-us)?\/*/, '/' + targetLocale + '/')
    }
  })

  $('.lang_area a').removeClass('current');
  $('.wrap').addClass(_locale);
  $('.lang_area a[lang="'+_locale+'"]').addClass('current');

  // MTA
  var _mtac = {"performanceMonitor":1,"senseQuery":1};
  (function() {
    var mta = document.createElement("script");
    mta.src = "//pingjs.qq.com/h5/stats.js?v2.0.4";
    mta.setAttribute("name", "MTAH5");
    mta.setAttribute("sid", "500665694");
    mta.setAttribute("cid", "500696449");
    var s = document.getElementsByTagName("script")[0];
    s.parentNode.insertBefore(mta, s);
  })();
</script>

</body>
</html>

<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="referrer" content="always" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>博客园 - 开发者的网上家园</title>
        <meta name="keywords" content="开发者,博客园,开发者,程序猿,程序媛,极客,编程,代码,开源,IT网站,Developer,Programmer,Coder,Geek,技术社区" />
        <meta name="description" content="博客园是一个面向开发者的知识分享社区。自创建以来，博客园一直致力并专注于为开发者打造一个纯净的技术交流社区，推动并帮助开发者通过互联网分享知识，从而让更多开发者从中受益。博客园的使命是帮助开发者用代码改变世界。" />
    <link rel="shortcut icon" href="//common.cnblogs.com/favicon.ico" type="image/x-icon" />
    <link rel="Stylesheet" type="text/css" href="/css/aggsite.min.css?v=FRR6qbd_vc7TQxxV0n1kBxwFAKoajo20N8gkufL2xuk" />
        <link id="RSSLink" title="RSS" type="application/rss+xml" rel="alternate" href="http://feed.cnblogs.com/blog/sitehome/rss" />
    <script src="//common.cnblogs.com/script/jquery.js" type="text/javascript"></script>
    <script src="/js/aggsite.min.js?v=i5fpirPIp07nMYU9lgbACJI7JK7pPMBJtiraOmuRryY"></script>
    <script async='async' src='https://www.googletagservices.com/tag/js/gpt.js'></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot('/1090369/A1', [468, 60], 'div-gpt-ad-1547816814884-0').addService(googletag.pubads());
            googletag.defineSlot('/1090369/B1', [300, 250], 'div-gpt-ad-1546331539224-0').addService(googletag.pubads());
            googletag.defineSlot('/1090369/B2', [300, 250], 'div-gpt-ad-1539007469525-0').addService(googletag.pubads());
            googletag.defineSlot('/1090369/B3', [300, 250], 'div-gpt-ad-1546331252242-0').addService(googletag.pubads());
            googletag.defineSlot('/1090369/B4', [300, 250], 'div-gpt-ad-1546331385104-0').addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });

        /**/</script>
</head>
<body>
    <div id="wrapper">
        <div id="hd_info">
            <div id="cnts">
                <div id="site_nav_top">代码改变世界</div>
                <div id="login_area"><span id="span_userinfo"></span></div>
                <div class="clear"></div>
            </div>
        </div>
        <div id="header">
            <p class="h_r_3"></p><p class="h_r_2"></p><p class="h_r_1"></p>
            <div id="header_block">
                <div id="logo">
                    <h1>
                            <a href="https://www.cnblogs.com/" title="开发者的网上家园"><img src="/images/logo_small.gif" alt="博客园Logo" width="142" height="55" /></a>
                    </h1>
                </div>

                <div class="clear"></div>
            </div>
            <p class="h_r_1"></p><p class="h_r_2"></p><p class="h_r_3"></p>
        </div>
        <div id="nav_menu"><a href="https://home.cnblogs.com/">园子</a><a href="https://news.cnblogs.com">新闻</a><a href="https://q.cnblogs.com/">博问</a><a href="https://ing.cnblogs.com/">闪存</a><a href="https://group.cnblogs.com/">小组</a><a href="https://wz.cnblogs.com/">收藏</a><a href="https://job.cnblogs.com/">招聘</a><a href="https://edu.cnblogs.com/">班级</a><a href="http://zzk.cnblogs.com/">找找看</a></div>
        <div id="main">
            <div class="post_nav_block_wrapper">
                <ul class="post_nav_block">
                        <li><a href="/" class="current_nav" title="">首页</a></li>
                        <li><a href="/pick/" class="" title="编辑精选博文">精华</a></li>
                        <li><a href="/candidate/" class="" title="候选区的博文">候选</a></li>
                        <li><a href="/news/" class="" title="新闻频道最新新闻">新闻</a></li>
                        <li><a href="/following" class="" title="我关注博客的最新博文">关注</a></li>
                        <li><a href="/aggsite/mycommented" class="" title="我评论过的博文">我评</a></li>
                        <li><a href="/aggsite/mydigged" class="" title="我推荐过的博文">我赞</a></li>
                </ul>
                <div class="clear"></div>
            </div>
            <div class="rss_link" id="rss_block">
<span id="posts_refresh_tips"></span><a id="posts_refresh" href="#" class="refresh" title="刷新博文列表" onclick="aggSite.loadCategoryPostList();return false">刷新</a><a href="http://feed.cnblogs.com/blog/sitehome/rss"><img src="//common.cnblogs.com/images/icon_rss.gif" alt="点击订阅" style="position:relative;top:2px;" title="订阅博客园文章" /></a>            </div>
                <div id="headline_block" class="headline"><ul><li class="editor_pick"><a href="https://www.cnblogs.com/sdflysha/p/20200209-ncp-simulation-dotnet-tutorial.html" id="editor_pick_lnk" target="_blank">【编辑推荐】手把手教你用 C# 做疫情传播仿真<span id="editor_pick_count"></span></a> <a href="/aggsite/headline" title="查看更多编辑推荐" class="right_more">»</a></li><li><a href="https://www.cnblogs.com/hejunlin/p/12289061.html" target="_blank" title="阅读1657, 评论6, 推荐4">[最多推荐]终于！疫情之下，第一批企业没能熬住面临倒闭，员工被遣散，没能等来春暖花开！(6/1657)</a> <a href="/aggsite/topdigged24h" title="查看24小时推荐排行" class="right_more">»</a></li><li><a href="https://news.cnblogs.com/n/655576/" target="_blank" title="阅读1241, 评论17, 推荐7">[新闻头条]火神山医院 10 天交付，支援的 IT 企业们都经历了什么？(17/1241)</a> <a href="https://news.cnblogs.com/" title="查看更多新闻" class="right_more">»</a></li><li><a href="https://news.cnblogs.com/n/655551/" target="_blank" title="阅读1421, 评论7, 推荐8">[推荐新闻]美国硅谷兴起远程异地办公 出现“零办公场地”公司(7/1421)</a> <a href="https://news.cnblogs.com/n/recommend" title="查看更多推荐新闻" class="right_more">»</a></li></ul></div>

            <div id="pager_top" style="display:none"></div>
            <div id="post_list_tips" class="hide"></div>
            
            <div id="post_list">
                <div class="post_item">
<div class="digg">
    <div class="diggit" onclick="DiggPost('serverlesscloud',12290602,572667,1)"> 
	<span class="diggnum" id="digg_count_12290602">1</span>
	</div>
	<div class="clear"></div>
    <div id="digg_tip_12290602" class="digg_tip">
        
    </div>
</div>      
<div class="post_item_body">
	<h3><a class="titlelnk" href="https://www.cnblogs.com/serverlesscloud/p/12290602.html" target="_blank">基于 Serverless +企业微信打造 nCoV 疫情监控小助手</a></h3>               	
    <p class="post_item_summary">
<a href="https://www.cnblogs.com/serverlesscloud/" target="_blank"><img width="48" height="48" class="pfs" src="https://pic.cnblogs.com/face/1718416/20200109165159.png" alt=""/></a>    最近的一些疫情信息很让人揪心，为了方便大家掌握疫情信息，在空闲之余做了一个关于 nCoV 的疫情监控小助手。主要的功能是通过企业微信的 WebHook 来推送疫情信息。这里将使用 Serverless 的整体代码思路和架构方式分享给大家。 实现效果 我们想要实现的大致的效果是这样的： 首先，我们需要 ...
    </p>              
    <div class="post_item_foot">                    
    <a href="https://www.cnblogs.com/serverlesscloud/" class="lightblue">Serverless</a> 
    发布于 2020-02-10 13:12 
    <span class="article_comment"><a href="https://www.cnblogs.com/serverlesscloud/p/12290602.html#commentform" title="0001-01-01 08:05" class="gray">
        评论(0)</a></span><span class="article_view"><a href="https://www.cnblogs.com/serverlesscloud/p/12290602.html" class="gray">阅读(16)</a></span></div>
</div>
<div class="clear"></div>
</div>
<div class="post_item">
<div class="digg">
    <div class="diggit" onclick="DiggPost('haoxi',12290522,310284,1)"> 
	<span class="diggnum" id="digg_count_12290522">0</span>
	</div>
	<div class="clear"></div>
    <div id="digg_tip_12290522" class="digg_tip">
        
    </div>
</div>      
<div class="post_item_body">
	<h3><a class="titlelnk" href="https://www.cnblogs.com/haoxi/p/12290522.html" target="_blank">搭建DevOps模式的项目</a></h3>               	
    <p class="post_item_summary">
    在后端的开发领域，各类开发框架都已经很多，在开发项目时可以根据不同的需要和需求选择合适的开发框架。然而在需要开发一个完善的工程化项目时，仅仅一个后端开发框架是不够的，还面临着在对开发项目的快速迭代中进行测试，部署，监控等问题。为了解决这些问题，DevOps的开发模式应运而生。 基于个人对DevOps ...
    </p>              
    <div class="post_item_foot">                    
    <a href="https://www.cnblogs.com/haoxi/" class="lightblue">昊羲</a> 
    发布于 2020-02-10 12:39 
    <span class="article_comment"><a href="https://www.cnblogs.com/haoxi/p/12290522.html#commentform" title="0001-01-01 08:05" class="gray">
        评论(0)</a></span><span class="article_view"><a href="https://www.cnblogs.com/haoxi/p/12290522.html" class="gray">阅读(57)</a></span></div>
</div>
<div class="clear"></div>
</div>
<div class="post_item">
<div class="digg">
    <div class="diggit" onclick="DiggPost('cxuanBlog',12290394,517352,1)"> 
	<span class="diggnum" id="digg_count_12290394">2</span>
	</div>
	<div class="clear"></div>
    <div id="digg_tip_12290394" class="digg_tip">
        
    </div>
</div>      
<div class="post_item_body">
	<h3><a class="titlelnk" href="https://www.cnblogs.com/cxuanBlog/p/12290394.html" target="_blank">这些操作系统的概念，保你没听过！</a></h3>               	
    <p class="post_item_summary">
<a href="https://www.cnblogs.com/cxuanBlog/" target="_blank"><img width="48" height="48" class="pfs" src="https://pic.cnblogs.com/face/1515111/20190523193633.png" alt=""/></a>    操作系统概念 大部分操作系统提供了特定的基础概念和抽象，例如进程、地址空间、文件等，它们是需要理解的核心内容。下面我们会简要介绍一些基本概念，为了说明这些概念，我们会不时的从 中提出示例，相同的示例也会存在于其他系统中，我们后面会进行介绍。 进程 操作系统一个很关键的概念就是 。进程的本质就是操作系 ...
    </p>              
    <div class="post_item_foot">                    
    <a href="https://www.cnblogs.com/cxuanBlog/" class="lightblue">cxuan</a> 
    发布于 2020-02-10 12:35 
    <span class="article_comment"><a href="https://www.cnblogs.com/cxuanBlog/p/12290394.html#commentform" title="0001-01-01 08:05" class="gray">
        评论(0)</a></span><span class="article_view"><a href="https://www.cnblogs.com/cxuanBlog/p/12290394.html" class="gray">阅读(44)</a></span></div>
</div>
<div class="clear"></div>
</div>
<div class="post_item">
<div class="digg">
    <div class="diggit" onclick="DiggPost('guolao',12290246,427768,1)"> 
	<span class="diggnum" id="digg_count_12290246">0</span>
	</div>
	<div class="clear"></div>
    <div id="digg_tip_12290246" class="digg_tip">
        
    </div>
</div>      
<div class="post_item_body">
	<h3><a class="titlelnk" href="https://www.cnblogs.com/guolao/p/12290246.html" target="_blank">koa中间执行机制</a></h3>               	
    <p class="post_item_summary">
<a href="https://www.cnblogs.com/guolao/" target="_blank"><img width="48" height="48" class="pfs" src="https://pic.cnblogs.com/face/1381549/20180420233709.png" alt=""/></a>    start 基于 koa 2.11 按以下流程分析： app.use() use 方法定义在 中： this.middleware 这就是一个数组，用来存放所有中间件，然后按顺序执行。 app.listen() 这个方法定义在 中： this.callback() this.handleReques ...
    </p>              
    <div class="post_item_foot">                    
    <a href="https://www.cnblogs.com/guolao/" class="lightblue">郭佬</a> 
    发布于 2020-02-10 11:23 
    <span class="article_comment"><a href="https://www.cnblogs.com/guolao/p/12290246.html#commentform" title="0001-01-01 08:05" class="gray">
        评论(0)</a></span><span class="article_view"><a href="https://www.cnblogs.com/guolao/p/12290246.html" class="gray">阅读(39)</a></span></div>
</div>
<div class="clear"></div>
</div>
<div class="post_item">
<div class="digg">
    <div class="diggit" onclick="DiggPost('coco1s',12290076,177636,1)"> 
	<span class="diggnum" id="digg_count_12290076">2</span>
	</div>
	<div class="clear"></div>
    <div id="digg_tip_12290076" class="digg_tip">
        
    </div>
</div>      
<div class="post_item_body">
	<h3><a class="titlelnk" href="https://www.cnblogs.com/coco1s/p/12290076.html" target="_blank">CSS 故障艺术</a></h3>               	
    <p class="post_item_summary">
<a href="https://www.cnblogs.com/coco1s/" target="_blank"><img width="48" height="48" class="pfs" src="https://pic.cnblogs.com/face/608782/20160411131806.png" alt=""/></a>    本文的主题是 Glitch Art，故障艺术。 什么是故障艺术？我们熟知的抖音的 LOGO 正是故障艺术其中一种表现形式。它有一种魔幻的感觉，看起来具有闪烁、震动的效果，很吸引人眼球。 故障艺术它模拟了画面信号出现故障导致成像错误的感觉。青色色块与红色色块无法重合就是这种故障的体现。从胶片时代开始到 ...
    </p>              
    <div class="post_item_foot">                    
    <a href="https://www.cnblogs.com/coco1s/" class="lightblue">ChokCoco</a> 
    发布于 2020-02-10 10:46 
    <span class="article_comment"><a href="https://www.cnblogs.com/coco1s/p/12290076.html#commentform" title="2020-02-10 12:36" class="gray">
        评论(2)</a></span><span class="article_view"><a href="https://www.cnblogs.com/coco1s/p/12290076.html" class="gray">阅读(102)</a></span></div>
</div>
<div class="clear"></div>
</div>
<div class="post_item">
<div class="digg">
    <div class="diggit" onclick="DiggPost('sanshi',12244310,52411,1)"> 
	<span class="diggnum" id="digg_count_12244310">3</span>
	</div>
	<div class="clear"></div>
    <div id="digg_tip_12244310" class="digg_tip">
        
    </div>
</div>      
<div class="post_item_body">
	<h3><a class="titlelnk" href="https://www.cnblogs.com/sanshi/p/12244310.html" target="_blank">今天你上班了吗？来聊聊一个隐蔽了 5 年的BUG！</a></h3>               	
    <p class="post_item_summary">
<a href="https://www.cnblogs.com/sanshi/" target="_blank"><img width="48" height="48" class="pfs" src="https://pic.cnblogs.com/face/48817/20151109122200.png" alt=""/></a>    前言 今天，我们要揭晓一个 FineUI 隐藏最深的一个BUG，这个问题从 2014-07-30 发布 FineUIPro v1.0.0 就一直存在，直到最新于 2020-01-10 发布的 v6.1.1 版本依然存在，之所以一直没有被提上台面，是因为这个BUG的重现场景比较少，特别是现在网络速度越 ...
    </p>              
    <div class="post_item_foot">                    
    <a href="https://www.cnblogs.com/sanshi/" class="lightblue">三生石上(FineUI控件)</a> 
    发布于 2020-02-10 10:39 
    <span class="article_comment"><a href="https://www.cnblogs.com/sanshi/p/12244310.html#commentform" title="2020-02-10 12:21" class="gray">
        评论(4)</a></span><span class="article_view"><a href="https://www.cnblogs.com/sanshi/p/12244310.html" class="gray">阅读(458)</a></span></div>
</div>
<div class="clear"></div>
</div>
<div class="post_item">
<div class="digg">
    <div class="diggit" onclick="DiggPost('edison0621',12287469,152901,1)"> 
	<span class="diggnum" id="digg_count_12287469">0</span>
	</div>
	<div class="clear"></div>
    <div id="digg_tip_12287469" class="digg_tip">
        
    </div>
</div>      
<div class="post_item_body">
	<h3><a class="titlelnk" href="https://www.cnblogs.com/edison0621/p/12287469.html" target="_blank">使用.NET Core优雅获取并展示最新疫情数据</a></h3>               	
    <p class="post_item_summary">
<a href="https://www.cnblogs.com/edison0621/" target="_blank"><img width="48" height="48" class="pfs" src="https://pic.cnblogs.com/face/533598/20130529110206.png" alt=""/></a>    前言新型冠状病毒的出现，着实让人紧张。我每天一大早都会去查看今天的最新数据，可是每次的数据都挺让人揪心的。今天突然间很想看看过去的历史的数据，结果查了很多资料都不是很全。反正国家让我们待在家里做贡献，那我们也可以多做做研究，偶然的机会发现了一个API可以查到历史数据，于是就用.NET Core 3. ...
    </p>              
    <div class="post_item_foot">                    
    <a href="https://www.cnblogs.com/edison0621/" class="lightblue">艾心❤</a> 
    发布于 2020-02-10 10:38 
    <span class="article_comment"><a href="https://www.cnblogs.com/edison0621/p/12287469.html#commentform" title="2020-02-10 13:13" class="gray">
        评论(1)</a></span><span class="article_view"><a href="https://www.cnblogs.com/edison0621/p/12287469.html" class="gray">阅读(266)</a></span></div>
</div>
<div class="clear"></div>
</div>
<div class="post_item">
<div class="digg">
    <div class="diggit" onclick="DiggPost('FraserYu',12290061,521870,1)"> 
	<span class="diggnum" id="digg_count_12290061">1</span>
	</div>
	<div class="clear"></div>
    <div id="digg_tip_12290061" class="digg_tip">
        
    </div>
</div>      
<div class="post_item_body">
	<h3><a class="titlelnk" href="https://www.cnblogs.com/FraserYu/p/12290061.html" target="_blank">IntelliJ IDEA的这个接口调试工具真是太好用了！</a></h3>               	
    <p class="post_item_summary">
<a href="https://www.cnblogs.com/FraserYu/" target="_blank"><img width="48" height="48" class="pfs" src="https://pic.cnblogs.com/face/1583165/20190618083853.png" alt=""/></a>    你有一个思想，我有一个思想，我们交换后，一个人就有两个思想 If you can NOT explain it simply, you do NOT understand it well enough 现陆续将Demo代码和技术文章整理在一起 "Github实践精选" ，方便大家阅读查看，觉得不错， ...
    </p>              
    <div class="post_item_foot">                    
    <a href="https://www.cnblogs.com/FraserYu/" class="lightblue">日拱一兵</a> 
    发布于 2020-02-10 10:36 
    <span class="article_comment"><a href="https://www.cnblogs.com/FraserYu/p/12290061.html#commentform" title="0001-01-01 08:05" class="gray">
        评论(0)</a></span><span class="article_view"><a href="https://www.cnblogs.com/FraserYu/p/12290061.html" class="gray">阅读(148)</a></span></div>
</div>
<div class="clear"></div>
</div>
<div class="post_item">
<div class="digg">
    <div class="diggit" onclick="DiggPost('yefanqiu',12289963,15167,1)"> 
	<span class="diggnum" id="digg_count_12289963">1</span>
	</div>
	<div class="clear"></div>
    <div id="digg_tip_12289963" class="digg_tip">
        
    </div>
</div>      
<div class="post_item_body">
	<h3><a class="titlelnk" href="https://www.cnblogs.com/yefanqiu/p/12289963.html" target="_blank">【阿里云IoT+YF3300】13.阿里云IoT Studio WEB监控界面构建</a></h3>               	
    <p class="post_item_summary">
<a href="https://www.cnblogs.com/yefanqiu/" target="_blank"><img width="48" height="48" class="pfs" src="https://pic.cnblogs.com/face/u11611.jpg" alt=""/></a>    Web可视化开发是阿里云IoT Studio中比较重要的一个功能，通过可视化拖拽的方式，方便地将各种图表组件与设备相关的数据源关联，无需编程，即可将物联网平台上接入的设备数据可视化展现。 ...
    </p>              
    <div class="post_item_foot">                    
    <a href="https://www.cnblogs.com/yefanqiu/" class="lightblue">叶帆</a> 
    发布于 2020-02-10 10:10 
    <span class="article_comment"><a href="https://www.cnblogs.com/yefanqiu/p/12289963.html#commentform" title="0001-01-01 08:05" class="gray">
        评论(0)</a></span><span class="article_view"><a href="https://www.cnblogs.com/yefanqiu/p/12289963.html" class="gray">阅读(121)</a></span></div>
</div>
<div class="clear"></div>
</div>
<div class="post_item">
<div class="digg">
    <div class="diggit" onclick="DiggPost('Tiancheng-Duan',12287247,294506,1)"> 
	<span class="diggnum" id="digg_count_12287247">0</span>
	</div>
	<div class="clear"></div>
    <div id="digg_tip_12287247" class="digg_tip">
        
    </div>
</div>      
<div class="post_item_body">
	<h3><a class="titlelnk" href="https://www.cnblogs.com/Tiancheng-Duan/p/12287247.html" target="_blank">Docker应用部署实录（包含完善Docker安装步骤）</a></h3>               	
    <p class="post_item_summary">
<a href="https://www.cnblogs.com/Tiancheng-Duan/" target="_blank"><img width="48" height="48" class="pfs" src="https://pic.cnblogs.com/face/987666/20160716113809.png" alt=""/></a>    Docker应用部署实录（包含完善Docker安装步骤） 前言 首先说一下这篇文章的来源。我之前接手的一个IOT项目，需要安装多个中控服务器。中控服务器需要安装RabbitMQ，Mysql，多个服务，这些部署，部署人员不怎么会（毕竟是硬件兼职的），只能让我给整一个简单一些方案。我当时就想到了容器化部 ...
    </p>              
    <div class="post_item_foot">                    
    <a href="https://www.cnblogs.com/Tiancheng-Duan/" class="lightblue">血夜之末</a> 
    发布于 2020-02-10 10:07 
    <span class="article_comment"><a href="https://www.cnblogs.com/Tiancheng-Duan/p/12287247.html#commentform" title="0001-01-01 08:05" class="gray">
        评论(0)</a></span><span class="article_view"><a href="https://www.cnblogs.com/Tiancheng-Duan/p/12287247.html" class="gray">阅读(92)</a></span></div>
</div>
<div class="clear"></div>
</div>
<div class="post_item">
<div class="digg">
    <div class="diggit" onclick="DiggPost('CtripDBA',12289939,384751,1)"> 
	<span class="diggnum" id="digg_count_12289939">0</span>
	</div>
	<div class="clear"></div>
    <div id="digg_tip_12289939" class="digg_tip">
        
    </div>
</div>      
<div class="post_item_body">
	<h3><a class="titlelnk" href="https://www.cnblogs.com/CtripDBA/p/12289939.html" target="_blank">记一次golang的内存泄露</a></h3>               	
    <p class="post_item_summary">
<a href="https://www.cnblogs.com/CtripDBA/" target="_blank"><img width="48" height="48" class="pfs" src="https://pic.cnblogs.com/face/1247138/20170925105826.png" alt=""/></a>    程序功能 此程序的主要功能是将文件中数据导入到clickhouse数据库中。 【问题描述】 服务器内存每隔一段时间会耗尽 【问题分析】 由于使用的是go语言开发的，所以采用了业界流行的工具pprof。 参考URL:https://cizixs.com/2017/09/11/profiling gol ...
    </p>              
    <div class="post_item_foot">                    
    <a href="https://www.cnblogs.com/CtripDBA/" class="lightblue">携程DBA</a> 
    发布于 2020-02-10 10:06 
    <span class="article_comment"><a href="https://www.cnblogs.com/CtripDBA/p/12289939.html#commentform" title="0001-01-01 08:05" class="gray">
        评论(0)</a></span><span class="article_view"><a href="https://www.cnblogs.com/CtripDBA/p/12289939.html" class="gray">阅读(87)</a></span></div>
</div>
<div class="clear"></div>
</div>
<div class="post_item">
<div class="digg">
    <div class="diggit" onclick="DiggPost('cicada-smile',12289940,519319,1)"> 
	<span class="diggnum" id="digg_count_12289940">0</span>
	</div>
	<div class="clear"></div>
    <div id="digg_tip_12289940" class="digg_tip">
        
    </div>
</div>      
<div class="post_item_body">
	<h3><a class="titlelnk" href="https://www.cnblogs.com/cicada-smile/p/12289940.html" target="_blank">文件系统(02)：基于SpringBoot框架，管理Xml和CSV文件类型</a></h3>               	
    <p class="post_item_summary">
<a href="https://www.cnblogs.com/cicada-smile/" target="_blank"><img width="48" height="48" class="pfs" src="https://pic.cnblogs.com/face/1691717/20190702210634.png" alt=""/></a>    本文源码： "GitHub·点这里" || "GitEE·点这里" 一、文档类型简介 1、XML文档 XML是可扩展标记语言，是一种用于标记电子文件使其具有结构性的标记语言。标记指计算机所能理解的信息符号，通过此种标记，计算机之间可以处理包含各种的信息比如数据结构，格式等。它可以用来标记数据、定义数 ...
    </p>              
    <div class="post_item_foot">                    
    <a href="https://www.cnblogs.com/cicada-smile/" class="lightblue">知了一笑</a> 
    发布于 2020-02-10 10:02 
    <span class="article_comment"><a href="https://www.cnblogs.com/cicada-smile/p/12289940.html#commentform" title="0001-01-01 08:05" class="gray">
        评论(0)</a></span><span class="article_view"><a href="https://www.cnblogs.com/cicada-smile/p/12289940.html" class="gray">阅读(57)</a></span></div>
</div>
<div class="clear"></div>
</div>
<div class="post_item">
<div class="digg">
    <div class="diggit" onclick="DiggPost('Howinfun',12289860,531793,1)"> 
	<span class="diggnum" id="digg_count_12289860">0</span>
	</div>
	<div class="clear"></div>
    <div id="digg_tip_12289860" class="digg_tip">
        
    </div>
</div>      
<div class="post_item_body">
	<h3><a class="titlelnk" href="https://www.cnblogs.com/Howinfun/p/12289860.html" target="_blank">【大白话系列】MySQL 学习总结 之 初步了解 InnoDB 存储引擎的架构设计</a></h3>               	
    <p class="post_item_summary">
<a href="https://www.cnblogs.com/Howinfun/" target="_blank"><img width="48" height="48" class="pfs" src="https://pic.cnblogs.com/face/1758146/20190801141728.png" alt=""/></a>    一、存储引擎 上节我们最后说到，SQL 的执行计划是执行器组件调用存储引擎的接口来完成的。 那我们可以理解为：MySQL 这个数据库管理系统是依靠存储引擎与存放数据的磁盘文件进行交互的。 那么 MySQL 有哪些存储引擎呢？ 主要有 MyISAM、InnoDB、Memory等等。而现在互联网中，基本 ...
    </p>              
    <div class="post_item_foot">                    
    <a href="https://www.cnblogs.com/Howinfun/" class="lightblue">不送花的程序猿</a> 
    发布于 2020-02-10 09:26 
    <span class="article_comment"><a href="https://www.cnblogs.com/Howinfun/p/12289860.html#commentform" title="0001-01-01 08:05" class="gray">
        评论(0)</a></span><span class="article_view"><a href="https://www.cnblogs.com/Howinfun/p/12289860.html" class="gray">阅读(79)</a></span></div>
</div>
<div class="clear"></div>
</div>
<div class="post_item">
<div class="digg">
    <div class="diggit" onclick="DiggPost('strick',12107950,153408,1)"> 
	<span class="diggnum" id="digg_count_12107950">3</span>
	</div>
	<div class="clear"></div>
    <div id="digg_tip_12107950" class="digg_tip">
        
    </div>
</div>      
<div class="post_item_body">
	<h3><a class="titlelnk" href="https://www.cnblogs.com/strick/p/12107950.html" target="_blank">21种JavaScript设计模式最新记录（含图和示例）</a></h3>               	
    <p class="post_item_summary">
<a href="https://www.cnblogs.com/strick/" target="_blank"><img width="48" height="48" class="pfs" src="https://pic.cnblogs.com/face/211606/20141022114859.png" alt=""/></a>    最近观看了《Javascript设计模式系统讲解与应用》教程，对设计模式有了新的认识，特在此做些记录。 一、UML 文中会涉及众多的UML类图，在开篇需要做点基础概念的认识。以下面的图为例，图片和说明均来源于《大话设计模式》一书。 （1）矩形框，它代表一个类。类图分三层，第一层显示类的名称，如果是抽 ...
    </p>              
    <div class="post_item_foot">                    
    <a href="https://www.cnblogs.com/strick/" class="lightblue">咖啡机（K.F.J）</a> 
    发布于 2020-02-10 09:02 
    <span class="article_comment"><a href="https://www.cnblogs.com/strick/p/12107950.html#commentform" title="0001-01-01 08:05" class="gray">
        评论(0)</a></span><span class="article_view"><a href="https://www.cnblogs.com/strick/p/12107950.html" class="gray">阅读(118)</a></span></div>
</div>
<div class="clear"></div>
</div>
<div class="post_item">
<div class="digg">
    <div class="diggit" onclick="DiggPost('cmt',12289810,39258,1)"> 
	<span class="diggnum" id="digg_count_12289810">0</span>
	</div>
	<div class="clear"></div>
    <div id="digg_tip_12289810" class="digg_tip">
        
    </div>
</div>      
<div class="post_item_body">
	<h3><a class="titlelnk" href="https://www.cnblogs.com/cmt/p/12289810.html" target="_blank">上周热点回顾（2.3-2.9）</a></h3>               	
    <p class="post_item_summary">
<a href="https://www.cnblogs.com/cmt/" target="_blank"><img width="48" height="48" class="pfs" src="https://pic.cnblogs.com/face/35695/20140318223943.png" alt=""/></a>    热点随笔： &#183;&#160;【故障公告】SQL语句执行超时引发网站首页访问故障&#160;(博客园团队)&#183;&#160;2019年，我花了3个月时间备考PMP&#160;(溪源More)&#183;&#160;【故障公告】再次遭遇SQL语句执行超时引发网站首页访问故障&#160;(博客园团队)&#183;&#160;编译调试 .NET Core 5.0 Preview 并分析 Span 的实 ...
    </p>              
    <div class="post_item_foot">                    
    <a href="https://www.cnblogs.com/cmt/" class="lightblue">博客园团队</a> 
    发布于 2020-02-10 08:54 
    <span class="article_comment"><a href="https://www.cnblogs.com/cmt/p/12289810.html#commentform" title="0001-01-01 08:05" class="gray">
        评论(0)</a></span><span class="article_view"><a href="https://www.cnblogs.com/cmt/p/12289810.html" class="gray">阅读(181)</a></span></div>
</div>
<div class="clear"></div>
</div>
<div class="post_item">
<div class="digg">
    <div class="diggit" onclick="DiggPost('htdaydayup',12047850,464657,1)"> 
	<span class="diggnum" id="digg_count_12047850">1</span>
	</div>
	<div class="clear"></div>
    <div id="digg_tip_12047850" class="digg_tip">
        
    </div>
</div>      
<div class="post_item_body">
	<h3><a class="titlelnk" href="https://www.cnblogs.com/htdaydayup/p/12047850.html" target="_blank">基于 HTML5 WebGL 的智慧城市（一）</a></h3>               	
    <p class="post_item_summary">
    要提升基础设施互联互通水平，打造数字长三角，协同建设新一代信息基础设施，共同推动重点领域智慧应用。大力发展基于物联网、大数据、人工智能的专业化服务，提升各领域融合发展、信息化协同和精细化管理水平。围绕城市公共管理、公共服务、公共安全等领域，支持有条件的城市建设基于人工智能和 5G 物联的城市大脑集群... ...
    </p>              
    <div class="post_item_foot">                    
    <a href="https://www.cnblogs.com/htdaydayup/" class="lightblue">HT学习笔记</a> 
    发布于 2020-02-10 08:44 
    <span class="article_comment"><a href="https://www.cnblogs.com/htdaydayup/p/12047850.html#commentform" title="0001-01-01 08:05" class="gray">
        评论(0)</a></span><span class="article_view"><a href="https://www.cnblogs.com/htdaydayup/p/12047850.html" class="gray">阅读(176)</a></span></div>
</div>
<div class="clear"></div>
</div>
<div class="post_item">
<div class="digg">
    <div class="diggit" onclick="DiggPost('37Y37',12289756,443575,1)"> 
	<span class="diggnum" id="digg_count_12289756">2</span>
	</div>
	<div class="clear"></div>
    <div id="digg_tip_12289756" class="digg_tip">
        
    </div>
</div>      
<div class="post_item_body">
	<h3><a class="titlelnk" href="https://www.cnblogs.com/37Y37/p/12289756.html" target="_blank">最好用的web端代码文本编辑器ACE</a></h3>               	
    <p class="post_item_summary">
<a href="https://www.cnblogs.com/37Y37/" target="_blank"><img width="48" height="48" class="pfs" src="https://pic.cnblogs.com/face/1439145/20181204210217.png" alt=""/></a>    使用足够简单，功能足够强大，体验足够优秀 之前有一个系列文章介绍我在运维系统开发过程中用到的那些顺手的前端插件，总共发了四篇文章介绍了三个非常棒的插件，分别是 "bootstrap duallistbox" 、 "select2" 和 "datatables" ，今天再更此系列，让好东西让更多的人知 ...
    </p>              
    <div class="post_item_foot">                    
    <a href="https://www.cnblogs.com/37Y37/" class="lightblue">运维咖啡吧</a> 
    发布于 2020-02-10 07:35 
    <span class="article_comment"><a href="https://www.cnblogs.com/37Y37/p/12289756.html#commentform" title="0001-01-01 08:05" class="gray">
        评论(0)</a></span><span class="article_view"><a href="https://www.cnblogs.com/37Y37/p/12289756.html" class="gray">阅读(194)</a></span></div>
</div>
<div class="clear"></div>
</div>
<div class="post_item">
<div class="digg">
    <div class="diggit" onclick="DiggPost('wcd144140',12289586,228090,1)"> 
	<span class="diggnum" id="digg_count_12289586">2</span>
	</div>
	<div class="clear"></div>
    <div id="digg_tip_12289586" class="digg_tip">
        
    </div>
</div>      
<div class="post_item_body">
	<h3><a class="titlelnk" href="https://www.cnblogs.com/wcd144140/p/12289586.html" target="_blank">《领域驱动设计》学习笔记</a></h3>               	
    <p class="post_item_summary">
<a href="https://www.cnblogs.com/wcd144140/" target="_blank"><img width="48" height="48" class="pfs" src="https://pic.cnblogs.com/face/758472/20160523093041.png" alt=""/></a>    【第一部分】运用领域模型 第1章：消化知识 有效的建模要素 （1）模型和实现的绑定 （2）建立了一种基于模型的语言 （3）开发一个蕴含丰富知识的模型 （4）提炼模型 （5）头脑风暴和实验 【学习心得】：千万不要用自己有限的思维规划完整的图形，持续学习、消化、输出（讨论）、沉淀，所有道理都是一致的。  ...
    </p>              
    <div class="post_item_foot">                    
    <a href="https://www.cnblogs.com/wcd144140/" class="lightblue">wc的一些事一些情</a> 
    发布于 2020-02-10 00:32 
    <span class="article_comment"><a href="https://www.cnblogs.com/wcd144140/p/12289586.html#commentform" title="2020-02-10 12:28" class="gray">
        评论(4)</a></span><span class="article_view"><a href="https://www.cnblogs.com/wcd144140/p/12289586.html" class="gray">阅读(128)</a></span></div>
</div>
<div class="clear"></div>
</div>
<div class="post_item">
<div class="digg">
    <div class="diggit" onclick="DiggPost('xiaofengzai',12289426,521634,1)"> 
	<span class="diggnum" id="digg_count_12289426">3</span>
	</div>
	<div class="clear"></div>
    <div id="digg_tip_12289426" class="digg_tip">
        
    </div>
</div>      
<div class="post_item_body">
	<h3><a class="titlelnk" href="https://www.cnblogs.com/xiaofengzai/p/12289426.html" target="_blank">安卓开发实战-记账本APP（三）</a></h3>               	
    <p class="post_item_summary">
<a href="https://www.cnblogs.com/xiaofengzai/" target="_blank"><img width="48" height="48" class="pfs" src="https://pic.cnblogs.com/face/1717524/20190919212952.png" alt=""/></a>    本次实现的是有关登录，注册和整体页面的改观，实现下方选项导致页面的切换效果。 利用到的技术有Sqlite数据库的增删改查，与fragment实现。由于暂时没有找到合适的图标，先借用微信的图标暂代一下。 ①在数据库这方面的学习后，我总结出三步走战略 第一步：定义实体类。先建立好用户对象，存储数据。 p ...
    </p>              
    <div class="post_item_foot">                    
    <a href="https://www.cnblogs.com/xiaofengzai/" class="lightblue">清风紫雪</a> 
    发布于 2020-02-09 23:36 
    <span class="article_comment"><a href="https://www.cnblogs.com/xiaofengzai/p/12289426.html#commentform" title="0001-01-01 08:05" class="gray">
        评论(0)</a></span><span class="article_view"><a href="https://www.cnblogs.com/xiaofengzai/p/12289426.html" class="gray">阅读(150)</a></span></div>
</div>
<div class="clear"></div>
</div>
<div class="post_item">
<div class="digg">
    <div class="diggit" onclick="DiggPost('GGbondLearn',12287488,567293,1)"> 
	<span class="diggnum" id="digg_count_12287488">0</span>
	</div>
	<div class="clear"></div>
    <div id="digg_tip_12287488" class="digg_tip">
        
    </div>
</div>      
<div class="post_item_body">
	<h3><a class="titlelnk" href="https://www.cnblogs.com/GGbondLearn/p/12287488.html" target="_blank">我的一个react路由之旅（步骤及详图）</a></h3>               	
    <p class="post_item_summary">
<a href="https://www.cnblogs.com/GGbondLearn/" target="_blank"><img width="48" height="48" class="pfs" src="https://pic.cnblogs.com/face/1895951/20191211170030.png" alt=""/></a>    今天开始react一个重要部分的xiao~习，路由~（过程截图，最后附代码） 以下代码只能骗糊涂蛋子，没错，就是我自己，不要打算让我敲出多高级的东西~ 理论性知识几乎没有，请不要打算让我给你说原理啥的，原理性的东西，网上很多，我现在搬砖学习很开心，勿忘初心~ （1）首先，你确定你安装了react环境 ...
    </p>              
    <div class="post_item_foot">                    
    <a href="https://www.cnblogs.com/GGbondLearn/" class="lightblue">GGbondMan</a> 
    发布于 2020-02-09 23:21 
    <span class="article_comment"><a href="https://www.cnblogs.com/GGbondLearn/p/12287488.html#commentform" title="0001-01-01 08:05" class="gray">
        评论(0)</a></span><span class="article_view"><a href="https://www.cnblogs.com/GGbondLearn/p/12287488.html" class="gray">阅读(88)</a></span></div>
</div>
<div class="clear"></div>
</div>
   

            </div>
            <script>editorPickStat(); aggSite.user.getUserInfo();</script>
            <script type="text/javascript">
                var aggSiteModel = {"CategoryType":"SiteHome","ParentCategoryId":0,"CategoryId":808,"PageIndex":1,"TotalPostCount":4000,"ItemListActionName":"AggSitePostList"};
            </script>
            <div id="pager_bottom"><div id="paging_block"><div class="pager"><a href="/" class="p_1 current" onclick="aggSite.loadCategoryPostList(1,20);buildPaging(1);return false;">1</a><a href="/sitehome/p/2" class="p_2 middle" onclick="aggSite.loadCategoryPostList(2,20);buildPaging(2);return false;">2</a><a href="/sitehome/p/3" class="p_3 middle" onclick="aggSite.loadCategoryPostList(3,20);buildPaging(3);return false;">3</a><a href="/sitehome/p/4" class="p_4 middle" onclick="aggSite.loadCategoryPostList(4,20);buildPaging(4);return false;">4</a><a href="/sitehome/p/5" class="p_5 middle" onclick="aggSite.loadCategoryPostList(5,20);buildPaging(5);return false;">5</a><a href="/sitehome/p/6" class="p_6 middle" onclick="aggSite.loadCategoryPostList(6,20);buildPaging(6);return false;">6</a><a href="/sitehome/p/7" class="p_7 middle" onclick="aggSite.loadCategoryPostList(7,20);buildPaging(7);return false;">7</a><a href="/sitehome/p/8" class="p_8 middle" onclick="aggSite.loadCategoryPostList(8,20);buildPaging(8);return false;">8</a><a href="/sitehome/p/9" class="p_9 middle" onclick="aggSite.loadCategoryPostList(9,20);buildPaging(9);return false;">9</a><a href="/sitehome/p/10" class="p_10 middle" onclick="aggSite.loadCategoryPostList(10,20);buildPaging(10);return false;">10</a><a href="/sitehome/p/11" class="p_11 middle" onclick="aggSite.loadCategoryPostList(11,20);buildPaging(11);return false;">11</a><span class="ellipsis">···</span><a href="/sitehome/p/200" class="p_200 last" onclick="aggSite.loadCategoryPostList(200,20);buildPaging(200);return false;">200</a><a href="/sitehome/p/2" onclick="aggSite.loadCategoryPostList(2,20);buildPaging(2);return false;">Next &gt;</a></div></div><script type="text/javascript">var pagingBuider={"OnlyLinkText":false,"TotalCount":4000,"PageIndex":1,"PageSize":20,"ShowPageCount":5,"SkipCount":0,"UrlFormat":"/sitehome/p/{0}","OnClickJsFunc":"aggSite.loadCategoryPostList()","FirstPageLink":"/","AjaxUrl":"/AggSite/Pager","AjaxCallbak":null,"TopPagerId":"pager_top","IsRenderScript":true};function buildPaging(pageIndex){pagingBuider.PageIndex=pageIndex;$.ajax({url:pagingBuider.AjaxUrl,data:JSON.stringify(pagingBuider),type:'post',dataType:'text',contentType:'application/json; charset=utf-8',success:function (data) { $('#paging_block').html(data); var pagerTop=$('#pager_top');if(pageIndex>1){$(pagerTop).html(data).show();}else{$(pagerTop).hide();}}});}</script>
</div>
            <div id="side_nav">
                
    <div id="cate_title_block">
<div id="cate_title_title"><div class="cate_title">网站分类</div></div>
<ul id="cate_item">
<li id="cate_item_108698" onmouseover="cateShow(108698)" onmouseout="cateHidden(108698)">
<a href="/cate/108698/">.NET技术(1)</a>
</li>
<li id="cate_item_2" onmouseover="cateShow(2)" onmouseout="cateHidden(2)">
<a href="/cate/2/">编程语言(13)</a>
</li>
<li id="cate_item_108701" onmouseover="cateShow(108701)" onmouseout="cateHidden(108701)">
<a href="/cate/108701/">软件设计(0)</a>
</li>
<li id="cate_item_108703" onmouseover="cateShow(108703)" onmouseout="cateHidden(108703)">
<a href="/cate/108703/">Web前端(3)</a>
</li>
<li id="cate_item_108704" onmouseover="cateShow(108704)" onmouseout="cateHidden(108704)">
<a href="/cate/108704/">企业信息化(0)</a>
</li>
<li id="cate_item_108705" onmouseover="cateShow(108705)" onmouseout="cateHidden(108705)">
<a href="/cate/108705/">手机开发(1)</a>
</li>
<li id="cate_item_108709" onmouseover="cateShow(108709)" onmouseout="cateHidden(108709)">
<a href="/cate/108709/">软件工程(1)</a>
</li>
<li id="cate_item_108712" onmouseover="cateShow(108712)" onmouseout="cateHidden(108712)">
<a href="/cate/108712/">数据库技术(1)</a>
</li>
<li id="cate_item_108724" onmouseover="cateShow(108724)" onmouseout="cateHidden(108724)">
<a href="/cate/108724/">操作系统(2)</a>
</li>
<li id="cate_item_4" onmouseover="cateShow(4)" onmouseout="cateHidden(4)">
<a href="/cate/4/">其他分类(2)</a>
</li>
<li id="cate_item_0" onmouseover="cateShow(0)" onmouseout="cateHidden(0)">
<a href="/cate/all/">所有随笔(701)</a>
</li>
<li id="cate_item_-1" onmouseover="cateShow(-1)" onmouseout="cateHidden(-1)">
<a href="/comment/">所有评论(119)</a>
</li>
</ul>
<div class="cate_bottom"></div>
<div id="cate_sub_block"></div>
<script type="text/javascript">var cateIdList = '108698,2,108701,108703,108704,108705,108709,108712,108724,4';aggSite.loadSubCategories();</script>
</div>
<div class="l_s"></div>
<p class="r_l_3"></p><p class="r_l_2"></p><p class="r_l_1"></p>
<div class="w_l">
<h4>链接</h4>        
<ul>
    <li><a href="https://group.cnblogs.com/forum/public/" target="_blank">反馈或建议</a></li> 
    <li><a href="//www.cnblogs.com/cmt/" target="_blank">官方博客</a></li>
    <li><a href="/skins.aspx" target="_blank">博客模板</a></li>
    <li><a href="http://www.blogjava.net/">Java博客</a></li>
    <li><a href="http://www.cppblog.com/">C++博客</a></li>
    <li><a href="//www.cnblogs.com/cmt/archive/2009/09/26/1574616.html">手机版</a></li>
</ul>
</div>
<p class="r_l_1"></p><p class="r_l_2"></p><p class="r_l_3"></p>
<div class="l_s"></div>
<div id="user_stats"></div>
<div class="l_s"></div>        
<p class="r_l_3"></p><p class="r_l_2"></p><p class="r_l_1"></p>
<div class="w_l">                
<h4>统计信息</h4>
<div id="site_stats"></div>      
</div>
<p class="r_l_1"></p><p class="r_l_2"></p><p class="r_l_3"></p>
            </div>
            <div id="side_right">
                    <div id="search_block">
                        <div class="side_search">
                            <input type="text" id="zzk_q" class="search_input" onkeydown="return zzk_go_enter(event);" tabindex="3" /><input onclick="zzk_go()" type="button" class="search_btn" value="找找看" />
                        </div>
                        <div id="google_search" class="side_search">
                            <input type="text" id="google_search_q" class="search_input" onkeydown="return google_search_enter(event);" /><input type="button" value="Google" class="search_btn" onclick="return google_search();" />
                        </div>
                    </div>
                <div id="cnblogs_a1">
                    <div id='div-gpt-ad-1547816814884-0' style='height:60px; width:468px;'>
                        <script>
                            googletag.cmd.push(function () { googletag.display('div-gpt-ad-1547816814884-0'); });
                        </script>
                    </div>
                </div>
                <div id="cnblogs_b1" class="sidebar-image">
                    <div id='div-gpt-ad-1546331539224-0' style='height:250px; width:300px;'>
                        <script>
                            googletag.cmd.push(function () { googletag.display('div-gpt-ad-1546331539224-0'); });
                        </script>
                    </div>
                </div>
                <div id="ad_right_text" class="ad_right_text"></div>
                <div id="side_right_block"></div>
            </div>
        </div>
            <div id="footer">
                <div class="footer_block">
                    <p class="r_b_3"></p><p class="r_b_2"></p><p class="r_b_1"></p><div id="friend_link">
    友情链接：<a href="https://www.vpsor.cn" target="_blank">硅云</a><a href="https://www.aliyun.com" target="_blank">阿里云</a><a href="https://cloud.tencent.com/act/developer?fromSource=gwzcw.3196334.3196334.3196334&utm_medium=cpc&utm_id=gwzcw.3196334.3196334.3196334" target="_blank">腾讯云</a><a href="https://www.huaweicloud.com/" target="_blank">华为云</a><a href="https://cloud.baidu.com" target="_blank">百度云</a><a href="https://www.jdcloud.com" target="_blank">京东云</a><a href="https://www.yisu.com/" target="_blank">亿速云</a><a href="https://www.163yun.com" target="_blank">网易云</a><a href="http://www.gcpowertools.com.cn" target="_blank">葡萄城控件</a><a href="http://www.chinaz.com/" target="_blank">站长之家</a><a href="http://dev.yesky.com" target="_blank">天极网</a><a href="http://www.hightopo.com/cn-index.html" target="_blank">图扑软件</a><a href="http://www.cnblogs.com/mipengine/" target="_blank">百度MIP博客</a><a href="http://wetest.qq.com/?from=links_cnblogs" target="_blank">腾讯WeTest</a><a href="http://yaq.qq.com/" target="_blank">腾讯御安全</a><a href="http://www.ucancode.com/index.html" target="_blank">工控组态源码</a><a href="https://163yun.cnblogs.com/" target="_blank">网易云博客</a><a href="https://kb.cnblogs.com" target="_blank">知识库</a>
</div><p class="r_b_1"></p><p class="r_b_2"></p><p class="r_b_3"></p>
                </div>
            </div>
        <div id="footer_bottom">
            <div>Powered by .NET Core 3.1.1 on Linux</div>
            <div><a href="https://about.cnblogs.com/">关于博客园</a><a href="https://about.cnblogs.com/contact">联系我们</a><a href="https://about.cnblogs.com/ad">广告服务</a><a href="https://about.cnblogs.com/job">人才服务</a>&copy;2004-2020<a href="https://www.cnblogs.com/">博客园</a>保留所有权利<a href="http://www.beian.miit.gov.cn" target="_blank">沪ICP备09004260号</a></div>
            <div><a href="https://ss.knet.cn/verifyseal.dll?sn=e131108110100433392itm000000&amp;ct=df&amp;a=1&amp;pa=0.25787803245785335" rel="nofollow" target="_blank"><img id="cnnic_img" src="//common.cnblogs.com/images/cnnic.png" alt="" width="64" height="23" /></a><a target="_blank" href="http://www.beian.gov.cn/portal/registerSystemInfo?recordcode=31011502001144" style="display:inline-block;text-decoration:none;height:20px;line-height:20px;"><img src="//common.cnblogs.com/images/ghs.png" alt="" /><span style="float:left;height:20px;line-height:20px;margin: 0 5px 0 5px; color:#939393;">沪公网安备 31011502001144号</span></a></div>
        </div>
    </div>
</body>
</html>

<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta property="og:description" content="阅读目录 楔子 内置函数 匿名函数 本章小结 返回顶部 楔子 在讲新知识之前，我们先来复习复习函数的基础知识。 问：函数怎么调用？ 函数名() 如果你们这么说。。。那你们就对了！好了记住这个事儿别给忘" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>python之路——内置函数和匿名函数 - Eva_J - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=PEqf9X5sM-TqgxEJ-34zllMNrLPY7PzC3YhmnDnLGWA" />
    <link id="MainCss" rel="stylesheet" href="/skins/loveisintheair/bundle-loveisintheair.min.css?v=uI4derS8SzeklkcuGM9ZZcviZI9ud2nNvmccYFPeg2g" />
    <link type="text/css" rel="stylesheet" href="https://www.cnblogs.com/Eva-J/custom.css?v=rKGUVHFGFpiR&#x2B;DZgzLkCajyLL&#x2B;Y=" />
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/loveisintheair/bundle-loveisintheair-mobile.min.css?v=Fulp5oGK9aHdU2yqgt6ypOn1ul0At8tRocTLFN1q7rk" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/Eva-J/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/Eva-J/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/Eva-J/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=F-Iy-_Lj7VcUKRIvNkS6UZ5LItMqjh1_L0VZk9Yxfb8"></script>
    <script>
        var currentBlogId = 250832;
        var currentBlogApp = 'Eva-J';
        var cb_enable_mathjax = false;
        var isLogined = false;
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    <div id="page_begin_html">
        <h2 style="line-height: 1.5em; float: left; text-align: right; color: #816d65; position: absolute; top: 110px; left: 110px; background: #d2eef4">程序媛</h2>
    </div>
    
<!--done-->
<center>
<div id="home">
<div id="header">
	<div id="blogTitle">
	<a href="https://www.cnblogs.com/Eva-J/"><img id="blogLogo" src="/skins/loveisintheair/images/logo.gif" alt="" /></a>			
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/Eva-J/">Eva_J</a>
</h1>
<h2>

</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
	<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
	<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/Eva-J/">
首页</a>
</li>
	<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
	<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/Eva_J">
联系</a></li>
	<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
	<li>
<a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/Eva-J/rss/">
订阅</a>
	
<a id="blog_nav_rss_image" href="https://www.cnblogs.com/Eva-J/rss/">
    <img src="/skins/loveisintheair/images/xml.gif" alt="订阅" />
</a></li>
</ul>


		<div class="blogStats">
			
			<!--done-->
随笔- 
33&nbsp;
文章- 
196&nbsp;
评论- 
331&nbsp;



			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div class="clear"></div>
	<div id="topicList">
		<div id="post_detail">
<!--done-->
<div id="topics">
	<div class="post">
		<h1 class = "postTitle">
			
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/Eva-J/articles/7206498.html">python之路——内置函数和匿名函数</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			
<div id="cnblogs_post_body" class="blogpost-body ">
    <p style="background: #e9f7fa;"><span style="font-size: 16px;"><strong>阅读目录</strong></span></p>
<div><a name="_labelTop"></a></div>
<ul>
<li><span style="font-size: 16px;"><strong><a style="text-decoration: none;" href="#_label1">　　楔子</a></strong></span></li>
<li><span style="font-size: 16px;"><strong><a style="text-decoration: none;" href="#_label2">　　内置函数</a></strong></span></li>
<li><span style="font-size: 16px;"><strong><a style="text-decoration: none;" href="#_label3">　　匿名函数</a></strong></span></li>
<li><span style="font-size: 16px;"><strong><a style="text-decoration: none;" href="#_label4">　　本章小结</a></strong></span></li>
</ul>
<div style="text-align: right;"><a name="_label1"></a> <a href="#_labelTop">返回顶部</a></div>
<p style="background: #e9f7fa;"><span style="font-size: 16px;"><strong>楔子</strong></span></p>
<p>在讲新知识之前，我们先来复习复习函数的基础知识。</p>
<p>问：函数怎么调用？</p>
<p>函数名()</p>
<p>如果你们这么说。。。那你们就对了！好了记住这个事儿别给忘记了，咱们继续谈下一话题。。。</p>
<p>来你们在自己的环境里打印一下自己的名字。</p>
<p>你们是怎么打的呀？</p>
<p>是不是print('xxx')，好了，现在你们结合我刚刚说的函数的调用方法，你有没有什么发现？</p>
<p>我们就猜，print有没有可能是一个函数？</p>
<p>但是没有人实现它啊。。。它怎么就能用了呢？</p>
<p>早在我们&ldquo;初识函数&rdquo;的时候是不是就是用len()引出的？</p>
<p>那现在我们也知道len()也是一个函数，也没人实现，它好像就自己能用了。。。</p>
<p>之前老师给你讲你可以这样用你就用了，那你有没有想过像这样直接拿来就能用的函数到底有多少？</p>
<div style="text-align: right;"><a name="_label2"></a> <a href="#_labelTop">返回顶部</a></div>
<p style="background: #e9f7fa;"><strong><span style="font-size: 16px;">内置函数</span></strong></p>
<p>接下来，我们就一起来看看python里的内置函数。截止到python版本3.6.2，现在python一共为我们提供了<strong>68个内置函数</strong>。它们就是python提供给你直接可以拿来使用的所有函数。这些函数有些我们已经用过了，有些我们还没用到过，还有一些是被封印了，必须等我们学了新知识才能解开封印的。那今天我们就一起来认识一下python的内置函数。这么多函数，我们该从何学起呢？</p>
<table border="1"><colgroup> <col width="21%" /> <col width="19%" /> <col width="20%" /> <col width="18%" /> <col width="22%" /> </colgroup>
<thead valign="bottom">
<tr><th>&nbsp;</th><th>&nbsp;</th><th>Built-in Functions</th><th>&nbsp;</th><th>&nbsp;</th></tr>
</thead>
<tbody valign="top">
<tr>
<td><a href="#abs"><span>abs()</span></a></td>
<td><a href="#func-dict"><span>dict()</span></a></td>
<td><a href="#help"><span>help()</span></a></td>
<td><a href="#min"><span>min()</span></a></td>
<td><a href="#setattr"><span>setattr()</span></a></td>
</tr>
<tr>
<td><a href="#all"><span>all()</span></a></td>
<td><a href="#dir"><span>dir()</span></a></td>
<td><a href="#hex"><span>hex()</span></a></td>
<td><a href="#next"><span>next()</span></a></td>
<td><a href="#slice"><span>slice()</span></a></td>
</tr>
<tr>
<td><a href="#any"><span>any()</span></a></td>
<td><a href="#divmod"><span>divmod()</span></a></td>
<td><a href="#id"><span>id()</span></a></td>
<td><a href="#object"><span>object()</span></a></td>
<td><a href="#sorted"><span>sorted()</span></a></td>
</tr>
<tr>
<td><a href="#ascii"><span>ascii()</span></a></td>
<td><a href="#enumerate"><span>enumerate()</span></a></td>
<td><a href="#input"><span>input()</span></a></td>
<td><a href="#oct"><span>oct()</span></a></td>
<td><a href="#staticmethod"><span>staticmethod()</span></a></td>
</tr>
<tr>
<td><a href="#bin"><span>bin()</span></a></td>
<td><a href="#eval"><span>eval()</span></a></td>
<td><a href="#int"><span>int()</span></a></td>
<td><a href="#open"><span>open()</span></a></td>
<td><a href="#func-str"><span>str()</span></a></td>
</tr>
<tr>
<td><a href="#bool"><span>bool()</span></a></td>
<td><a href="#exec"><span>exec()</span></a></td>
<td><a href="#isinstance"><span>isinstance()</span></a></td>
<td><a href="#ord"><span>ord()</span></a></td>
<td><a href="#sum"><span>sum()</span></a></td>
</tr>
<tr>
<td><a href="#func-bytearray"><span>bytearray()</span></a></td>
<td><a href="#filter"><span>filter()</span></a></td>
<td><a href="#issubclass"><span>issubclass()</span></a></td>
<td><a href="#pow"><span>pow()</span></a></td>
<td><a href="#super"><span>super()</span></a></td>
</tr>
<tr>
<td><a href="#func-bytes"><span>bytes()</span></a></td>
<td><a href="#float"><span>float()</span></a></td>
<td><a href="#iter"><span>iter()</span></a></td>
<td><a href="#print"><span>print()</span></a></td>
<td><a href="#func-tuple"><span>tuple()</span></a></td>
</tr>
<tr>
<td><a href="#callable"><span>callable()</span></a></td>
<td><a href="#format"><span>format()</span></a></td>
<td><a href="#len"><span>len()</span></a></td>
<td><a href="#property"><span>property()</span></a></td>
<td><a href="#type"><span>type()</span></a></td>
</tr>
<tr>
<td><a href="#chr"><span>chr()</span></a></td>
<td><a href="#func-frozenset"><span>frozenset()</span></a></td>
<td><a href="#func-list"><span>list()</span></a></td>
<td><a href="#func-range"><span>range()</span></a></td>
<td><a href="#vars"><span>vars()</span></a></td>
</tr>
<tr>
<td><a href="#classmethod"><span>classmethod()</span></a></td>
<td><a href="#getattr"><span>getattr()</span></a></td>
<td><a href="#locals"><span>locals()</span></a></td>
<td><a href="#repr"><span>repr()</span></a></td>
<td><a href="#zip"><span>zip()</span></a></td>
</tr>
<tr>
<td><a href="#compile"><span>compile()</span></a></td>
<td><a href="#globals"><span>globals()</span></a></td>
<td><a href="#map"><span>map()</span></a></td>
<td><a href="#reversed"><span>reversed()</span></a></td>
<td><a href="#__import__"><span>__import__()</span></a></td>
</tr>
<tr>
<td><a href="#complex"><span>complex()</span></a></td>
<td><a href="#hasattr"><span>hasattr()</span></a></td>
<td><a href="#max"><span>max()</span></a></td>
<td><a href="#round"><span>round()</span></a></td>
<td>&nbsp;</td>
</tr>
<tr>
<td><a href="#delattr"><span>delattr()</span></a></td>
<td><a href="#hash"><span>hash()</span></a></td>
<td><a href="#func-memoryview"><span>memoryview()</span></a></td>
<td><a href="#func-set"><span>set()</span></a></td>
<td>&nbsp;</td>
</tr>
</tbody>
</table>
<p>上面就是内置函数的表，68个函数都在这儿了。这个表的顺序是按照首字母的排列顺序来的，你会发现都混乱的堆在一起。比如，oct和bin和hex都是做进制换算的，但是却被写在了三个地方。。。这样非常不利于大家归纳和学习。那我把这些函数分成了6大类。你看下面这张图，你猜咱们今天会学哪几大类呀？&nbsp;</p>
<p><img src="https://images2017.cnblogs.com/blog/827651/201709/827651-20170906163345007-1150151899.png" alt="" width="777" height="219" /></p>
<p>我猜你们都猜对了。我们今天就要学习用粉红色标注出来的这四大块&mdash;&mdash;56个方法。还有12个方法欠着怎么办呢？我们讲完面向对象这剩下的12个会在两周之内陆续还给你们的，我保证(认真脸)。那这样，我们今天就主要关注我们要学习的这56个方法。</p>
<p>那要学的一共4块，咱们从哪儿开始学起呢？</p>
<p><strong><span style="font-size: 16px;">作用域相关</span></strong></p>
<p><img src="https://images2017.cnblogs.com/blog/827651/201709/827651-20170906183348132-1021130873.png" alt="" width="323" height="130" /></p>
<p>基于字典的形式获取局部变量和全局变量</p>
<p>globals()&mdash;&mdash;获取全局变量的字典</p>
<p>locals()&mdash;&mdash;获取执行本方法所在命名空间内的局部变量的字典</p>
<p><strong><span style="font-size: 16px;">其他</span></strong></p>
<p><img src="https://images2017.cnblogs.com/blog/827651/201709/827651-20170906183550226-452967258.png" alt="" width="298" height="461" /></p>
<p>字符串类型代码的执行</p>
<p><a href="http://www.cnblogs.com/Eva-J/articles/7266087.html" target="_blank">http://www.cnblogs.com/Eva-J/articles/7266087.html</a></p>
<p>&nbsp;</p>
<p>输入输出相关：</p>
<p>input() 输入</p>
<div class="cnblogs_code" onclick="cnblogs_code_show('770f76c9-8931-4319-9582-cb58b9f670a4')"><img id="code_img_closed_770f76c9-8931-4319-9582-cb58b9f670a4" class="code_img_closed" src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="" /><img id="code_img_opened_770f76c9-8931-4319-9582-cb58b9f670a4" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('770f76c9-8931-4319-9582-cb58b9f670a4',event)" src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt="" />
<div id="cnblogs_code_open_770f76c9-8931-4319-9582-cb58b9f670a4" class="cnblogs_code_hide">
<pre>s = input(<span style="color: #800000;">"</span><span style="color: #800000;">请输入内容 ： </span><span style="color: #800000;">"</span>)  <span style="color: #008000;">#</span><span style="color: #008000;">输入的内容赋值给s变量</span>
<span style="color: #0000ff;">print</span>(s)  <span style="color: #008000;">#</span><span style="color: #008000;">输入什么打印什么。数据类型是str</span></pre>
</div>
<span class="cnblogs_code_collapse">input的用法</span></div>
<p>print() 输出</p>
<div class="cnblogs_code" onclick="cnblogs_code_show('3c06d03f-61ec-4b70-9e62-7b57b3224d44')"><img id="code_img_closed_3c06d03f-61ec-4b70-9e62-7b57b3224d44" class="code_img_closed" src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="" /><img id="code_img_opened_3c06d03f-61ec-4b70-9e62-7b57b3224d44" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('3c06d03f-61ec-4b70-9e62-7b57b3224d44',event)" src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt="" />
<div id="cnblogs_code_open_3c06d03f-61ec-4b70-9e62-7b57b3224d44" class="cnblogs_code_hide">
<pre><span style="color: #0000ff;">def</span> <span style="color: #0000ff;">print</span>(self, *args, sep=<span style="color: #800000;">'</span> <span style="color: #800000;">'</span>, end=<span style="color: #800000;">'</span><span style="color: #800000;">\n</span><span style="color: #800000;">'</span>, file=None): <span style="color: #008000;">#</span><span style="color: #008000;"> known special case of print</span>
    <span style="color: #800000;">"""</span><span style="color: #800000;">
    print(value, ..., sep=' ', end='\n', file=sys.stdout, flush=False)
    file:  默认是输出到屏幕，如果设置为文件句柄，输出到文件
    sep:   打印多个值之间的分隔符，默认为空格
    end:   每一次打印的结尾，默认为换行符
    flush: 立即把内容输出到流文件，不作缓存
    </span><span style="color: #800000;">"""</span></pre>
</div>
<span class="cnblogs_code_collapse">print源码剖析</span></div>
<div class="cnblogs_code" onclick="cnblogs_code_show('480c6934-10de-4485-a2e7-7a8f744c951a')"><img id="code_img_closed_480c6934-10de-4485-a2e7-7a8f744c951a" class="code_img_closed" src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="" /><img id="code_img_opened_480c6934-10de-4485-a2e7-7a8f744c951a" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('480c6934-10de-4485-a2e7-7a8f744c951a',event)" src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt="" />
<div id="cnblogs_code_open_480c6934-10de-4485-a2e7-7a8f744c951a" class="cnblogs_code_hide">
<pre>f = open(<span style="color: #800000;">'</span><span style="color: #800000;">tmp_file</span><span style="color: #800000;">'</span>,<span style="color: #800000;">'</span><span style="color: #800000;">w</span><span style="color: #800000;">'</span><span style="color: #000000;">)
</span><span style="color: #0000ff;">print</span>(123,456,sep=<span style="color: #800000;">'</span><span style="color: #800000;">,</span><span style="color: #800000;">'</span>,file = f,flush=True)</pre>
</div>
<span class="cnblogs_code_collapse">file关键字的说明</span></div>
<div class="cnblogs_code" onclick="cnblogs_code_show('de6e4ec5-4016-4dd3-b5c0-aa64c341c45a')"><img id="code_img_closed_de6e4ec5-4016-4dd3-b5c0-aa64c341c45a" class="code_img_closed" src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="" /><img id="code_img_opened_de6e4ec5-4016-4dd3-b5c0-aa64c341c45a" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('de6e4ec5-4016-4dd3-b5c0-aa64c341c45a',event)" src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt="" />
<div id="cnblogs_code_open_de6e4ec5-4016-4dd3-b5c0-aa64c341c45a" class="cnblogs_code_hide">
<pre><span style="color: #0000ff;">import</span><span style="color: #000000;"> time
</span><span style="color: #0000ff;">for</span> i <span style="color: #0000ff;">in</span> range(0,101,2<span style="color: #000000;">):  
     time.sleep(</span>0.1<span style="color: #000000;">)
     char_num </span>= i//2      <span style="color: #008000;">#</span><span style="color: #008000;">打印多少个'*'</span>
     per_str = <span style="color: #800000;">'</span><span style="color: #800000;">\r%s%% : %s\n</span><span style="color: #800000;">'</span> % (i, <span style="color: #800000;">'</span><span style="color: #800000;">*</span><span style="color: #800000;">'</span> * char_num) <span style="color: #0000ff;">if</span> i == 100 <span style="color: #0000ff;">else</span> <span style="color: #800000;">'</span><span style="color: #800000;">\r%s%% : %s</span><span style="color: #800000;">'</span>%(i,<span style="color: #800000;">'</span><span style="color: #800000;">*</span><span style="color: #800000;">'</span>*<span style="color: #000000;">char_num)
     </span><span style="color: #0000ff;">print</span>(per_str,end=<span style="color: #800000;">''</span>, flush=<span style="color: #000000;">True)
</span><span style="color: #008000;">#</span><span style="color: #008000;">小越越  ： \r 可以把光标移动到行首但不换行</span></pre>
</div>
<span class="cnblogs_code_collapse">打印进度条</span></div>
<p>&nbsp;</p>
<p>数据类型相关：</p>
<p>type(o)&nbsp;返回变量o的数据类型</p>
<p>&nbsp;</p>
<p>内存相关：</p>
<p>id(o) o是参数，返回一个变量的内存地址</p>
<p>hash(o) o是参数，返回一个可hash变量的哈希值，不可hash的变量被hash之后会报错。</p>
<div class="cnblogs_code" onclick="cnblogs_code_show('da0008c0-d335-416b-97a0-a4b779019c7f')"><img id="code_img_closed_da0008c0-d335-416b-97a0-a4b779019c7f" class="code_img_closed" src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="" /><img id="code_img_opened_da0008c0-d335-416b-97a0-a4b779019c7f" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('da0008c0-d335-416b-97a0-a4b779019c7f',event)" src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt="" />
<div id="cnblogs_code_open_da0008c0-d335-416b-97a0-a4b779019c7f" class="cnblogs_code_hide">
<pre>t = (1,2,3<span style="color: #000000;">)
l </span>= [1,2,3<span style="color: #000000;">]
</span><span style="color: #0000ff;">print</span>(hash(t))  <span style="color: #008000;">#</span><span style="color: #008000;">可hash</span>
<span style="color: #0000ff;">print</span>(hash(l))  <span style="color: #008000;">#</span><span style="color: #008000;">会报错</span>

<span style="color: #800000;">'''</span><span style="color: #800000;">
结果：
TypeError: unhashable type: 'list'
</span><span style="color: #800000;">'''</span></pre>
</div>
<span class="cnblogs_code_collapse">hash实例</span></div>
<p>hash函数会根据一个内部的算法对当前可hash变量进行处理，返回一个int数字。</p>
<p>*每一次执行程序，内容相同的变量hash值在这一次执行过程中不会发生改变。</p>
<p>&nbsp;</p>
<p>文件操作相关</p>
<p>open() &nbsp;打开一个文件，返回一个文件操作符(文件句柄)</p>
<p>操作文件的模式有r,w,a,r+,w+,a+ 共6种，每一种方式都可以用二进制的形式操作(rb,wb,ab,rb+,wb+,ab+)</p>
<p>可以用encoding指定编码.</p>
<p>&nbsp;</p>
<p>模块操作相关</p>
<p>__import__导入一个模块</p>
<div class="cnblogs_code" onclick="cnblogs_code_show('7a9a1eb1-623f-4615-a68e-6b5e6bbf646c')"><img id="code_img_closed_7a9a1eb1-623f-4615-a68e-6b5e6bbf646c" class="code_img_closed" src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="" /><img id="code_img_opened_7a9a1eb1-623f-4615-a68e-6b5e6bbf646c" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('7a9a1eb1-623f-4615-a68e-6b5e6bbf646c',event)" src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt="" />
<div id="cnblogs_code_open_7a9a1eb1-623f-4615-a68e-6b5e6bbf646c" class="cnblogs_code_hide">
<pre><span style="color: #0000ff;">import</span> time</pre>
</div>
<span class="cnblogs_code_collapse">导入模块</span></div>
<div class="cnblogs_code" onclick="cnblogs_code_show('d03215b4-3dbd-4291-b614-9fb9e078b28e')"><img id="code_img_closed_d03215b4-3dbd-4291-b614-9fb9e078b28e" class="code_img_closed" src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="" /><img id="code_img_opened_d03215b4-3dbd-4291-b614-9fb9e078b28e" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('d03215b4-3dbd-4291-b614-9fb9e078b28e',event)" src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt="" />
<div id="cnblogs_code_open_d03215b4-3dbd-4291-b614-9fb9e078b28e" class="cnblogs_code_hide">
<pre>os = <span style="color: #800080;">__import__</span>(<span style="color: #800000;">'</span><span style="color: #800000;">os</span><span style="color: #800000;">'</span><span style="color: #000000;">)
</span><span style="color: #0000ff;">print</span>(os.path.abspath(<span style="color: #800000;">'</span><span style="color: #800000;">.</span><span style="color: #800000;">'</span>))</pre>
</div>
<span class="cnblogs_code_collapse">__import__</span></div>
<p>&nbsp;</p>
<p>帮助方法</p>
<p>在控制台执行help()进入帮助模式。可以随意输入变量或者变量的类型。输入q退出</p>
<p>或者直接执行help(o)，o是参数，查看和变量o有关的操作。。。</p>
<p>&nbsp;</p>
<p>和调用相关</p>
<p>callable(o)，o是参数，看这个变量是不是可调用。</p>
<p>如果o是一个函数名，就会返回True</p>
<div class="cnblogs_code" onclick="cnblogs_code_show('801d0b89-12d2-45ff-ba79-7d1776d95426')"><img id="code_img_closed_801d0b89-12d2-45ff-ba79-7d1776d95426" class="code_img_closed" src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="" /><img id="code_img_opened_801d0b89-12d2-45ff-ba79-7d1776d95426" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('801d0b89-12d2-45ff-ba79-7d1776d95426',event)" src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt="" />
<div id="cnblogs_code_open_801d0b89-12d2-45ff-ba79-7d1776d95426" class="cnblogs_code_hide">
<pre><span style="color: #0000ff;">def</span> func():<span style="color: #0000ff;">pass</span>
<span style="color: #0000ff;">print</span>(callable(func))  <span style="color: #008000;">#</span><span style="color: #008000;">参数是函数名，可调用，返回True</span>
<span style="color: #0000ff;">print</span>(callable(123))   <span style="color: #008000;">#</span><span style="color: #008000;">参数是数字，不可调用，返回False</span></pre>
</div>
<span class="cnblogs_code_collapse">callable实例</span></div>
<p>&nbsp;</p>
<p>查看参数所属类型的所有内置方法</p>
<p>dir() 默认查看全局空间内的属性，也接受一个参数，查看这个参数内的方法或变量</p>
<div class="cnblogs_code" onclick="cnblogs_code_show('a2c299b0-8a46-4a2a-9669-a311b7542a48')"><img id="code_img_closed_a2c299b0-8a46-4a2a-9669-a311b7542a48" class="code_img_closed" src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="" /><img id="code_img_opened_a2c299b0-8a46-4a2a-9669-a311b7542a48" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('a2c299b0-8a46-4a2a-9669-a311b7542a48',event)" src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt="" />
<div id="cnblogs_code_open_a2c299b0-8a46-4a2a-9669-a311b7542a48" class="cnblogs_code_hide">
<pre><span style="color: #0000ff;">print</span>(dir(list))  <span style="color: #008000;">#</span><span style="color: #008000;">查看列表的内置方法</span>
<span style="color: #0000ff;">print</span>(dir(int))  <span style="color: #008000;">#</span><span style="color: #008000;">查看整数的内置方法</span></pre>
</div>
<span class="cnblogs_code_collapse">查看某变量/数据类型的内置方法</span></div>
<p>&nbsp;</p>
<p><strong><span style="font-size: 16px;">和数字相关</span></strong></p>
<p><img src="https://images2017.cnblogs.com/blog/827651/201709/827651-20170906183838444-695457508.png" alt="" width="305" height="418" /></p>
<p>&nbsp;</p>
<p>数字&mdash;&mdash;数据类型相关：bool，int，float，complex</p>
<p>数字&mdash;&mdash;进制转换相关：bin，oct，hex</p>
<p>数字&mdash;&mdash;数学运算：abs，divmod，min，max，sum，round，pow</p>
<p>&nbsp;</p>
<p><strong><span style="font-size: 16px;">和数据结构相关</span></strong></p>
<p><img src="https://images2017.cnblogs.com/blog/827651/201707/827651-20170731224735224-258335015.png" alt="" width="312" height="203" /></p>
<p>序列&mdash;&mdash;列表和元组相关的：list和tuple</p>
<p>序列&mdash;&mdash;字符串相关的：str，<a href="http://www.cnblogs.com/Eva-J/articles/7266245.html" target="_blank">format</a>，bytes，bytearry，memoryview，ord，chr，ascii，repr</p>
<div class="cnblogs_code" onclick="cnblogs_code_show('48d54929-943b-45d9-b271-733c581d1a29')"><img id="code_img_closed_48d54929-943b-45d9-b271-733c581d1a29" class="code_img_closed" src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="" /><img id="code_img_opened_48d54929-943b-45d9-b271-733c581d1a29" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('48d54929-943b-45d9-b271-733c581d1a29',event)" src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt="" />
<div id="cnblogs_code_open_48d54929-943b-45d9-b271-733c581d1a29" class="cnblogs_code_hide">
<pre>ret = bytearray(<span style="color: #800000;">'</span><span style="color: #800000;">alex</span><span style="color: #800000;">'</span>,encoding=<span style="color: #800000;">'</span><span style="color: #800000;">utf-8</span><span style="color: #800000;">'</span><span style="color: #000000;">)
</span><span style="color: #0000ff;">print</span><span style="color: #000000;">(id(ret))
</span><span style="color: #0000ff;">print</span><span style="color: #000000;">(ret[0])
ret[0] </span>= 65
<span style="color: #0000ff;">print</span><span style="color: #000000;">(ret)
</span><span style="color: #0000ff;">print</span>(id(ret))</pre>
</div>
<span class="cnblogs_code_collapse">bytearray</span></div>
<div class="cnblogs_code" onclick="cnblogs_code_show('b404d239-3e48-482a-b4d0-88d4b2a68246')"><img id="code_img_closed_b404d239-3e48-482a-b4d0-88d4b2a68246" class="code_img_closed" src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="" /><img id="code_img_opened_b404d239-3e48-482a-b4d0-88d4b2a68246" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('b404d239-3e48-482a-b4d0-88d4b2a68246',event)" src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt="" />
<div id="cnblogs_code_open_b404d239-3e48-482a-b4d0-88d4b2a68246" class="cnblogs_code_hide">
<pre>ret = memoryview(bytes(<span style="color: #800000;">'</span><span style="color: #800000;">你好</span><span style="color: #800000;">'</span>,encoding=<span style="color: #800000;">'</span><span style="color: #800000;">utf-8</span><span style="color: #800000;">'</span><span style="color: #000000;">))
</span><span style="color: #0000ff;">print</span><span style="color: #000000;">(len(ret))
</span><span style="color: #0000ff;">print</span>(bytes(ret[:3]).decode(<span style="color: #800000;">'</span><span style="color: #800000;">utf-8</span><span style="color: #800000;">'</span><span style="color: #000000;">))
</span><span style="color: #0000ff;">print</span>(bytes(ret[3:]).decode(<span style="color: #800000;">'</span><span style="color: #800000;">utf-8</span><span style="color: #800000;">'</span>))</pre>
</div>
<span class="cnblogs_code_collapse">memoryview</span></div>
<p>&nbsp;</p>
<p>序列：reversed，slice</p>
<div class="cnblogs_code" onclick="cnblogs_code_show('57c79a20-0c56-48fc-9954-b0f1dc046ffe')"><img id="code_img_closed_57c79a20-0c56-48fc-9954-b0f1dc046ffe" class="code_img_closed" src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="" /><img id="code_img_opened_57c79a20-0c56-48fc-9954-b0f1dc046ffe" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('57c79a20-0c56-48fc-9954-b0f1dc046ffe',event)" src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt="" />
<div id="cnblogs_code_open_57c79a20-0c56-48fc-9954-b0f1dc046ffe" class="cnblogs_code_hide">
<pre>l = (1,2,23,213,5612,342,43<span style="color: #000000;">)
</span><span style="color: #0000ff;">print</span><span style="color: #000000;">(l)
</span><span style="color: #0000ff;">print</span>(list(reversed(l)))</pre>
</div>
<span class="cnblogs_code_collapse">reversed</span></div>
<div class="cnblogs_code" onclick="cnblogs_code_show('bd46bdf1-1d0e-4f6a-957c-9bd7e489c5cb')"><img id="code_img_closed_bd46bdf1-1d0e-4f6a-957c-9bd7e489c5cb" class="code_img_closed" src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="" /><img id="code_img_opened_bd46bdf1-1d0e-4f6a-957c-9bd7e489c5cb" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('bd46bdf1-1d0e-4f6a-957c-9bd7e489c5cb',event)" src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt="" />
<div id="cnblogs_code_open_bd46bdf1-1d0e-4f6a-957c-9bd7e489c5cb" class="cnblogs_code_hide">
<pre>l = (1,2,23,213,5612,342,43<span style="color: #000000;">)
sli </span>= slice(1,5,2<span style="color: #000000;">)
</span><span style="color: #0000ff;">print</span>(l[sli])</pre>
</div>
<span class="cnblogs_code_collapse">slice</span></div>
<p>&nbsp;</p>
<p>数据集合&mdash;&mdash;字典和集合：dict，<a href="http://www.cnblogs.com/Eva-J/articles/6993515.html" target="_blank">set，frozenset</a></p>
<p>数据集合：len，sorted，enumerate，all，any，zip，filter，map</p>
<p>filter和map：<a href="http://www.cnblogs.com/Eva-J/articles/7266192.html" target="_blank">http://www.cnblogs.com/Eva-J/articles/7266192.html</a></p>
<p>sorted方法：<a href="http://www.cnblogs.com/Eva-J/articles/7265992.html" target="_blank">http://www.cnblogs.com/Eva-J/articles/7265992.html</a></p>
<p>&nbsp;</p>
<div style="text-align: right;"><a name="_label3"></a> <a href="#_labelTop">返回顶部</a></div>
<p style="background: #e9f7fa;"><span style="font-size: 16px;"><strong>匿名函数</strong></span></p>
<p>匿名函数：为了解决那些功能很简单的需求而设计的一句话函数</p>
<div class="cnblogs_code">
<pre><span style="color: #008000;">#</span><span style="color: #008000;">这段代码</span>
<span style="color: #0000ff;">def</span><span style="color: #000000;"> calc(n):
    </span><span style="color: #0000ff;">return</span> n**<span style="color: #000000;">n
</span><span style="color: #0000ff;">print</span>(calc(10<span style="color: #000000;">))
 
</span><span style="color: #008000;">#</span><span style="color: #008000;">换成匿名函数</span>
calc = <span style="color: #0000ff;">lambda</span> n:n**<span style="color: #000000;">n
</span><span style="color: #0000ff;">print</span>(calc(10))</pre>
</div>
<p><img src="https://images2017.cnblogs.com/blog/827651/201708/827651-20170802172131708-1006906954.png" alt="" width="277" height="174" /></p>
<p>上面是我们对calc这个匿名函数的分析，下面给出了一个关于匿名函数格式的说明</p>
<div class="cnblogs_code">
<pre>函数名 = <span style="color: #0000ff;">lambda</span><span style="color: #000000;"> 参数 ：返回值

</span><span style="color: #008000;">#</span><span style="color: #008000;">参数可以有多个，用逗号隔开</span><span style="color: #008000;">
#</span><span style="color: #008000;">匿名函数不管逻辑多复杂，只能写一行，且逻辑执行结束后的内容就是返回值</span><span style="color: #008000;">
#</span><span style="color: #008000;">返回值和正常的函数一样可以是任意数据类型</span></pre>
</div>
<p>我们可以看出，匿名函数并不是真的不能有名字。</p>
<p>匿名函数的调用和正常的调用也没有什么分别。 就是 函数名(参数) 就可以了～～～</p>
<p>练一练：</p>
<div class="cnblogs_code">
<pre><span style="color: #000000;">请把以下函数变成匿名函数
</span><span style="color: #0000ff;">def</span><span style="color: #000000;"> add(x,y):
    </span><span style="color: #0000ff;">return</span> x+y</pre>
</div>
<p>&nbsp;</p>
<p>上面是匿名函数的函数用法。除此之外，匿名函数也不是浪得虚名，它真的可以匿名。在和其他功能函数合作的时候</p>
<div class="cnblogs_code">
<pre>l=[3,2,100,999,213,1111,31121,333<span style="color: #000000;">]
</span><span style="color: #0000ff;">print</span><span style="color: #000000;">(max(l))

dic</span>={<span style="color: #800000;">'</span><span style="color: #800000;">k1</span><span style="color: #800000;">'</span>:10,<span style="color: #800000;">'</span><span style="color: #800000;">k2</span><span style="color: #800000;">'</span>:100,<span style="color: #800000;">'</span><span style="color: #800000;">k3</span><span style="color: #800000;">'</span>:30<span style="color: #000000;">}


</span><span style="color: #0000ff;">print</span><span style="color: #000000;">(max(dic))
</span><span style="color: #0000ff;">print</span>(dic[max(dic,key=<span style="color: #0000ff;">lambda</span> k:dic[k])])</pre>
</div>
<div class="cnblogs_code">
<pre>res = map(<span style="color: #0000ff;">lambda</span> x:x**2,[1,5,7,4,8<span style="color: #000000;">])
</span><span style="color: #0000ff;">for</span> i <span style="color: #0000ff;">in</span><span style="color: #000000;"> res:
    </span><span style="color: #0000ff;">print</span><span style="color: #000000;">(i)

输出
</span>1
25
49
16
64</pre>
</div>
<div class="cnblogs_code">
<pre>res = filter(<span style="color: #0000ff;">lambda</span> x:x&gt;10,[5,8,11,9,15<span style="color: #000000;">])
</span><span style="color: #0000ff;">for</span> i <span style="color: #0000ff;">in</span><span style="color: #000000;"> res:
    </span><span style="color: #0000ff;">print</span><span style="color: #000000;">(i)

输出
</span>11
15</pre>
</div>
<p>面试题练一练</p>
<p>现有两个元组(('a'),('b')),(('c'),('d'))，请使用python中匿名函数生成列表[{'a':'c'},{'b':'d'}]</p>
<div class="cnblogs_code" onclick="cnblogs_code_show('121ca24b-ddff-4d72-a65c-03b9cf16130f')"><img id="code_img_closed_121ca24b-ddff-4d72-a65c-03b9cf16130f" class="code_img_closed" src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="" /><img id="code_img_opened_121ca24b-ddff-4d72-a65c-03b9cf16130f" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('121ca24b-ddff-4d72-a65c-03b9cf16130f',event)" src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt="" />
<div id="cnblogs_code_open_121ca24b-ddff-4d72-a65c-03b9cf16130f" class="cnblogs_code_hide">
<pre><span style="color: #008000;">#</span><span style="color: #008000;">答案一</span>
test = <span style="color: #0000ff;">lambda</span> t1,t2 :[{i:j} <span style="color: #0000ff;">for</span> i,j <span style="color: #0000ff;">in</span><span style="color: #000000;"> zip(t1,t2)]
</span><span style="color: #0000ff;">print</span><span style="color: #000000;">(test(t1,t2))
</span><span style="color: #008000;">#</span><span style="color: #008000;">答案二</span>
<span style="color: #0000ff;">print</span>(list(map(<span style="color: #0000ff;">lambda</span> t:{t[0]:t[1<span style="color: #000000;">]},zip(t1,t2))))
</span><span style="color: #008000;">#</span><span style="color: #008000;">还可以这样写</span>
<span style="color: #0000ff;">print</span>([{i:j} <span style="color: #0000ff;">for</span> i,j <span style="color: #0000ff;">in</span> zip(t1,t2)])</pre>
</div>
<span class="cnblogs_code_collapse">coding</span></div>
<div class="cnblogs_code" onclick="cnblogs_code_show('e297916e-59dc-40ca-a648-ecf4cc319f08')"><img id="code_img_closed_e297916e-59dc-40ca-a648-ecf4cc319f08" class="code_img_closed" src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="" /><img id="code_img_opened_e297916e-59dc-40ca-a648-ecf4cc319f08" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('e297916e-59dc-40ca-a648-ecf4cc319f08',event)" src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt="" />
<div id="cnblogs_code_open_e297916e-59dc-40ca-a648-ecf4cc319f08" class="cnblogs_code_hide">
<pre>1<span style="color: #000000;">.下面程序的输出结果是：
d </span>= <span style="color: #0000ff;">lambda</span> p:p*2<span style="color: #000000;">
t </span>= <span style="color: #0000ff;">lambda</span> p:p*3<span style="color: #000000;">
x </span>= 2<span style="color: #000000;">
x </span>=<span style="color: #000000;"> d(x)
x </span>=<span style="color: #000000;"> t(x)
x </span>=<span style="color: #000000;"> d(x)
</span><span style="color: #0000ff;">print</span><span style="color: #000000;"> x

</span>2.现有两元组((<span style="color: #800000;">'</span><span style="color: #800000;">a</span><span style="color: #800000;">'</span>),(<span style="color: #800000;">'</span><span style="color: #800000;">b</span><span style="color: #800000;">'</span>)),((<span style="color: #800000;">'</span><span style="color: #800000;">c</span><span style="color: #800000;">'</span>),(<span style="color: #800000;">'</span><span style="color: #800000;">d</span><span style="color: #800000;">'</span>)),请使用python中匿名函数生成列表[{<span style="color: #800000;">'</span><span style="color: #800000;">a</span><span style="color: #800000;">'</span>:<span style="color: #800000;">'</span><span style="color: #800000;">c</span><span style="color: #800000;">'</span>},{<span style="color: #800000;">'</span><span style="color: #800000;">b</span><span style="color: #800000;">'</span>:<span style="color: #800000;">'</span><span style="color: #800000;">d</span><span style="color: #800000;">'</span><span style="color: #000000;">}]

</span>3<span style="color: #000000;">.以下代码的输出是什么？请给出答案并解释。
</span><span style="color: #0000ff;">def</span><span style="color: #000000;"> multipliers():
    </span><span style="color: #0000ff;">return</span> [<span style="color: #0000ff;">lambda</span> x:i*x <span style="color: #0000ff;">for</span> i <span style="color: #0000ff;">in</span> range(4<span style="color: #000000;">)]
</span><span style="color: #0000ff;">print</span>([m(2) <span style="color: #0000ff;">for</span> m <span style="color: #0000ff;">in</span><span style="color: #000000;"> multipliers()])
请修改multipliers的定义来产生期望的结果。</span></pre>
</div>
<span class="cnblogs_code_collapse">练习</span></div>
<p>&nbsp;</p>
<div style="text-align: right;"><a name="_label4"></a> <a href="#_labelTop">返回顶部</a></div>
<p style="background: #e9f7fa;"><span style="font-size: 16px;"><strong>本章小结</strong></span></p>
<p>说学习内置函数，不如说整理自己的知识体系。其实整理这些内置函数的过程也是在整理自己的知识体系。</p>
<p>我们讲课的时候会归类：常用或者不常用，主要还是根据场景而言。</p>
<p>一个优秀的程序员就应该是在该用这个方法的时候信手拈来，把每一个内置的函数都用的恰到好处。</p>
<p>要想做到这一点，至少要先了解，才能在需要的时候想起，进而将它用在该用的地方。</p>
<p>但是在这里，我还是以自己的一点经验之谈，把几个平时工作中相对更常用的方法推荐一下，请务必重点掌握：</p>
<p>其他：input,print,type,hash,open,import,dir</p>
<p>str类型代码执行：eval,exec</p>
<p>数字：bool,int,float,abs,divmod,min,max,sum,round,pow</p>
<p>序列&mdash;&mdash;列表和元组相关的：list和tuple</p>
<p>序列&mdash;&mdash;字符串相关的：str，bytes，repr</p>
<p>序列：reversed，slice</p>
<p>数据集合&mdash;&mdash;字典和集合：dict，set，frozenset</p>
<p>数据集合：len，sorted，enumerate，zip，filter，map</p>
<p>参考文档：</p>
<p>　　<a href="https://docs.python.org/3/library/functions.html#object" target="_blank">https://docs.python.org/3/library/functions.html#object</a></p>
</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
		</div>
		<div class="postDesc">posted @ 
<span id="post-date">2017-07-31 22:27</span>&nbsp;
<a href="https://www.cnblogs.com/Eva-J/">Eva_J</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditArticles.aspx?postid=7206498" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(7206498);return false;">收藏</a></div>
	</div>
	
	
</div><!--end: topics 文章、评论容器-->
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 250832, cb_blogApp = 'Eva-J', cb_blogUserGuid = '4997edaa-857b-e511-9fc1-ac853d9f53cc';
    var cb_entryId = 7206498, cb_entryCreatedDate = '2017-07-31 22:27', cb_postType = 2; 
    loadViewCount(cb_entryId);
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div></div>


	</div><!--end: topicList 文章列表容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

			<div id="calendar"><div id="calendar"><div id="blog-calendar" style="display:none"></div></div>                
                    <script>loadBlogDefaultCalendar();</script></div>
			
			<DIV id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</DIV>
			
		</div><!--end: sideBarMain -->
		<div class="clear"></div>
		<div id="footer">
			<!--done-->
Copyright &copy; 2020 Eva_J
<br /><span id="poweredby">Powered by .NET Core 3.1.1 on Linux</span>



		</div><!--end: footer -->
	</div><!--end: sideBar 侧边栏容器 -->
</div><!--end: home 自定义的最大容器 -->
</center>


    
</body>
</html>
<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta property="og:description" content="简介 操作系统线程理论 线程概念的引入背景 线程的特点 进程和线程的关系 使用线程的实际场景 用户级线程和内核级线程(了解) 线程和python 理论知识 线程的创建Threading.Thread类" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>python之路——线程 - Eva_J - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=PEqf9X5sM-TqgxEJ-34zllMNrLPY7PzC3YhmnDnLGWA" />
    <link id="MainCss" rel="stylesheet" href="/skins/loveisintheair/bundle-loveisintheair.min.css?v=uI4derS8SzeklkcuGM9ZZcviZI9ud2nNvmccYFPeg2g" />
    <link type="text/css" rel="stylesheet" href="https://www.cnblogs.com/Eva-J/custom.css?v=rKGUVHFGFpiR&#x2B;DZgzLkCajyLL&#x2B;Y=" />
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/loveisintheair/bundle-loveisintheair-mobile.min.css?v=Fulp5oGK9aHdU2yqgt6ypOn1ul0At8tRocTLFN1q7rk" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/Eva-J/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/Eva-J/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/Eva-J/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=F-Iy-_Lj7VcUKRIvNkS6UZ5LItMqjh1_L0VZk9Yxfb8"></script>
    <script>
        var currentBlogId = 250832;
        var currentBlogApp = 'Eva-J';
        var cb_enable_mathjax = false;
        var isLogined = false;
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    <div id="page_begin_html">
        <h2 style="line-height: 1.5em; float: left; text-align: right; color: #816d65; position: absolute; top: 110px; left: 110px; background: #d2eef4">程序媛</h2>
    </div>
    
<!--done-->
<center>
<div id="home">
<div id="header">
	<div id="blogTitle">
	<a href="https://www.cnblogs.com/Eva-J/"><img id="blogLogo" src="/skins/loveisintheair/images/logo.gif" alt="" /></a>			
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/Eva-J/">Eva_J</a>
</h1>
<h2>

</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
	<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
	<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/Eva-J/">
首页</a>
</li>
	<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
	<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/Eva_J">
联系</a></li>
	<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
	<li>
<a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/Eva-J/rss/">
订阅</a>
	
<a id="blog_nav_rss_image" href="https://www.cnblogs.com/Eva-J/rss/">
    <img src="/skins/loveisintheair/images/xml.gif" alt="订阅" />
</a></li>
</ul>


		<div class="blogStats">
			
			<!--done-->
随笔- 
33&nbsp;
文章- 
196&nbsp;
评论- 
331&nbsp;



			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div class="clear"></div>
	<div id="topicList">
		<div id="post_detail">
<!--done-->
<div id="topics">
	<div class="post">
		<h1 class = "postTitle">
			
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/Eva-J/articles/8306047.html">python之路——线程</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			
<div id="cnblogs_post_body" class="blogpost-body ">
    <h1>简介</h1>
<div id="cnblogs_post_body"><a name="_labelTop"></a>
<ul>
<li><a style="color: darkseagreen; text-decoration: none; font-size: 18px;" href="#_label1">操作系统线程理论</a>
<ul>
<li><a style="color: darkseagreen; text-decoration: none; font-size: 18px;" href="#_label2">线程概念的引入背景</a></li>
<li><a style="color: darkseagreen; text-decoration: none; font-size: 18px;" href="#_label3">线程的特点</a></li>
<li><a style="color: darkseagreen; text-decoration: none; font-size: 18px;" href="#_label4">进程和线程的关系</a></li>
<li><a style="color: darkseagreen; text-decoration: none; font-size: 18px;" href="#_label5">使用线程的实际场景</a></li>
<li><a style="color: darkseagreen; text-decoration: none; font-size: 18px;" href="#_label7">用户级线程和内核级线程(了解)</a></li>
</ul>
</li>
<li><a style="color: darkseagreen; text-decoration: none; font-size: 18px;" href="#_label8">线程和python</a>
<ul>
<li><a style="color: darkseagreen; text-decoration: none; font-size: 18px;" href="#_label9">理论知识</a></li>
<li><a style="color: darkseagreen; text-decoration: none; font-size: 18px;" href="#_label10">线程的创建Threading.Thread类</a></li>
<li><a style="color: darkseagreen; text-decoration: none; font-size: 18px;" href="#_label11">锁</a></li>
<li><a style="color: darkseagreen; text-decoration: none; font-size: 18px;" href="#_label16">队列</a></li>
<li><a style="color: darkseagreen; text-decoration: none; font-size: 18px;" href="#_label17">Python标准模块--concurrent.futures</a></li>
</ul>
</li>
</ul>
<div style="text-align: right;"><a href="#_labelTop">回到顶部</a><a name="_label1"></a></div>
<h1>操作系统线程理论</h1>
<div style="text-align: right;"><a href="#_labelTop">回到顶部</a><a name="_label2"></a></div>
<h2>线程概念的引入背景</h2>
<h3>进程</h3>
<div class="para">
<p>　　之前我们已经了解了操作系统中进程的概念，程序并不能单独运行，只有将程序装载到内存中，系统为它分配资源才能运行，而这种执行的程序就称之为进程。程序和进程的区别就在于：程序是指令的集合，它是进程运行的静态描述文本；进程是程序的一次执行活动，属于动态概念。在多道编程中，我们允许多个程序同时加载到内存中，在操作系统的调度下，可以实现并发地执行。这是这样的设计，大大提高了CPU的利用率。进程的出现让每个用户感觉到自己独享CPU，因此，进程就是为了在CPU上实现多道编程而提出的。</p>
<h3>有了进程为什么要有线程</h3>
<p>　　进程有很多优点，它提供了多道编程，让我们感觉我们每个人都拥有自己的CPU和其他资源，可以提高计算机的利用率。很多人就不理解了，既然进程这么优秀，为什么还要线程呢？其实，仔细观察就会发现进程还是有很多缺陷的，主要体现在两点上：</p>
<ul>
<li>
<p>进程只能在一个时间干一件事，如果想同时干两件事或多件事，进程就无能为力了。</p>
</li>
<li>
<p>进程在执行的过程中如果阻塞，例如等待输入，整个进程就会挂起，即使进程中有些工作不依赖于输入的数据，也将无法执行。</p>
</li>
</ul>
<p>　　如果这两个缺点理解比较困难的话，举个现实的例子也许你就清楚了：如果把我们上课的过程看成一个进程的话，那么我们要做的是耳朵听老师讲课，手上还要记笔记，脑子还要思考问题，这样才能高效的完成听课的任务。而如果只提供进程这个机制的话，上面这三件事将不能同时执行，同一时间只能做一件事，听的时候就不能记笔记，也不能用脑子思考，这是其一；如果老师在黑板上写演算过程，我们开始记笔记，而老师突然有一步推不下去了，阻塞住了，他在那边思考着，而我们呢，也不能干其他事，即使你想趁此时思考一下刚才没听懂的一个问题都不行，这是其二。</p>
<p>　　现在你应该明白了进程的缺陷了，而解决的办法很简单，我们完全可以让听、写、思三个独立的过程，并行起来，这样很明显可以提高听课的效率。而实际的操作系统中，也同样引入了这种类似的机制&mdash;&mdash;线程。</p>
<h3>线程的出现</h3>
</div>
<div class="para">　　60年代，在OS中能拥有资源和独立运行的基本单位是进程，然而随着计算机技术的发展，进程出现了很多弊端，一是由于进程是资源拥有者，创建、撤消与切换存在较大的时空开销，因此需要引入<strong>轻型进程</strong>；二是由于对称多处理机（SMP）出现，<strong>可以满足多个运行单位</strong>，而多个进程并行开销过大。</div>
<div class="para">　　因此在80年代，出现了<strong>能独立运行的基本单位</strong>&mdash;&mdash;线程（Threads）<strong>。</strong></div>
<div class="para"><strong>　　注意：进程是资源分配的最小单位,线程是CPU调度的最小单位.</strong></div>
<div class="para"><strong>　　　　　每一个进程中至少有一个线程。　</strong></div>
<div class="para">
<div style="text-align: right;"><a href="#_labelTop">回到顶部</a><a name="_label4"></a></div>
<h2 class="para"><strong>进程和线程的关系</strong></h2>
<p><strong>　　<img src="https://images2017.cnblogs.com/blog/827651/201801/827651-20180118212223115-85632065.png" alt="" width="289" height="196" /></strong></p>
<div class="para"><strong>　　线程与进程的区别</strong>可以归纳为以下4点：</div>
<div class="para">　　1）地址空间和其它资源（如打开文件）：进程间相互独立，同一进程的各线程间共享。某进程内的线程在其它进程不可见。</div>
<div class="para">　　2）通信：<a href="https://baike.baidu.com/item/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1" target="_blank">进程间通信</a><a href="https://baike.baidu.com/item/IPC" target="_blank">IPC</a>，线程间可以直接读写进程数据段（如全局变量）来进行通信&mdash;&mdash;需要<a href="https://baike.baidu.com/item/%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5" target="_blank">进程同步</a>和互斥手段的辅助，以保证数据的一致性。</div>
<div class="para">　　3）调度和切换：线程上下文切换比进程上下文切换要快得多。</div>
<div class="para">　　4）在多线程操作系统中，进程不是一个可执行的实体。</div>
<div class="para">　　<a href="http://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html" target="_blank">*通过漫画了解线程进城</a></div>
</div>
<div style="text-align: right;"><a href="#_labelTop">回到顶部</a><a name="_label3"></a></div>
<h2 class="para"><strong>线程的特点</strong></h2>
<div class="para">
<div class="para">　　在多线程的操作系统中，通常是在一个进程中包括多个线程，每个线程都是作为利用CPU的基本单位，是花费最小开销的实体。线程具有以下属性。</div>
<div class="para">　　1）轻型实体</div>
<div class="para">　　线程中的实体基本上不拥有系统资源，只是有一点必不可少的、能保证独立运行的资源。</div>
<div class="para">　　线程的实体包括程序、数据和TCB。线程是动态概念，它的动态特性由线程控制块TCB（Thread Control Block）描述。</div>
<div class="para">
<div class="cnblogs_code" onclick="cnblogs_code_show('9dadf0b0-cd65-47f8-8d93-61e356da4b06')"><img id="code_img_closed_9dadf0b0-cd65-47f8-8d93-61e356da4b06" class="code_img_closed" src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="" /><img id="code_img_opened_9dadf0b0-cd65-47f8-8d93-61e356da4b06" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('9dadf0b0-cd65-47f8-8d93-61e356da4b06',event)" src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt="" />
<div id="cnblogs_code_open_9dadf0b0-cd65-47f8-8d93-61e356da4b06" class="cnblogs_code_hide">
<pre><span style="color: #000000;">TCB包括以下信息：
（</span>1<span style="color: #000000;">）线程状态。
（</span>2<span style="color: #000000;">）当线程不运行时，被保存的现场资源。
（</span>3<span style="color: #000000;">）一组执行堆栈。
（</span>4<span style="color: #000000;">）存放每个线程的局部变量主存区。
（</span>5<span style="color: #000000;">）访问同一个进程中的主存和其它资源。
用于指示被执行指令序列的程序计数器、保留局部变量、少数状态参数和返回地址等的一组寄存器和堆栈。</span></pre>
</div>
<span class="cnblogs_code_collapse">TCB包括以下信息</span></div>
</div>
<div class="para">　　2）独立调度和分派的基本单位。</div>
<div class="para">　　在多线程OS中，线程是能独立运行的基本单位，因而也是独立调度和分派的基本单位。由于线程很&ldquo;轻&rdquo;，故线程的切换非常迅速且开销小（在同一进程中的）。</div>
<div class="para">　　3）共享进程资源。
<div class="lemma-picture text-pic layout-right"><span class="description">　　线程在同一进程中的各个线程，都可以共享该进程所拥有的资源，这首先表现在：所有线程都具有相同的进程id，这意味着，线程可以访问该进程的每一个内存资源；此外，还可以访问进程所拥有的已打开文件、定时器、信号量机构等。由于同一个进程内的线程共享内存和文件，所以线程之间互相通信不必调用内核。</span></div>
</div>
<div class="para">　　4<em>）可并发执行。</em></div>
<div class="para"><em>　　在一个进程中的多个线程之间，可以并发执行，甚至允许在一个进程中所有线程都能并发执行；同样，不同进程中的线程也能并发执行，充分利用和发挥了处理机与外围设备并行工作的能力。</em></div>
<div class="para">　　</div>
</div>
<div style="text-align: right;"><a href="#_labelTop">回到顶部</a><a name="_label5"></a></div>
<h2 class="para">使用线程的实际场景</h2>
<p><img src="https://images2017.cnblogs.com/blog/827651/201801/827651-20180118213009115-1272261459.png" alt="" /></p>
<p>&nbsp;</p>
<p>　　开启一个字处理软件进程，该进程肯定需要办不止一件事情，比如监听键盘输入，处理文字，定时自动将文字保存到硬盘，这三个任务操作的都是同一块数据，因而不能用多进程。只能在一个进程里并发地开启三个线程,如果是单线程，那就只能是，键盘输入时，不能处理文字和自动保存，自动保存时又不能输入和处理文字。</p>
<h2>内存中的线程</h2>
<p><img src="https://images2017.cnblogs.com/blog/827651/201801/827651-20180118213709271-527249129.png" alt="" width="637" height="274" /></p>
<p>&nbsp;</p>
<p>　　多个线程共享同一个进程的地址空间中的资源，是对一台计算机上多个进程的模拟，有时也称线程为轻量级的进程。</p>
<p>　　而对一台计算机上多个进程，则共享物理内存、磁盘、打印机等其他物理资源。多线程的运行也多进程的运行类似，是cpu在多个线程之间的快速切换。</p>
<p>　　不同的进程之间是充满敌意的，彼此是抢占、竞争cpu的关系，如果迅雷会和QQ抢资源。而同一个进程是由一个程序员的程序创建，所以同一进程内的线程是合作关系，一个线程可以访问另外一个线程的内存地址，大家都是共享的，一个线程干死了另外一个线程的内存，那纯属程序员脑子有问题。</p>
<p>　　类似于进程，每个线程也有自己的堆栈，不同于进程，线程库无法利用时钟中断强制线程让出CPU，可以调用thread_yield运行线程自动放弃cpu，让另外一个线程运行。</p>
<p>　　线程通常是有益的，但是带来了不小程序设计难度，线程的问题是：</p>
<p>　　1. 父进程有多个线程，那么开启的子线程是否需要同样多的线程</p>
<p>　　2. 在同一个进程中，如果一个线程关闭了文件，而另外一个线程正准备往该文件内写内容呢？</p>
<p>　　因此，在多线程的代码中，需要更多的心思来设计程序的逻辑、保护程序的数据。</p>
<div style="text-align: right;"><a href="#_labelTop">回到顶部</a><a name="_label6"></a></div>
<h2>用户级线程和内核级线程（了解）</h2>
<p>　　线程的实现可以分为两类：用户级线程(User-Level Thread)和内核线线程(Kernel-Level Thread)，后者又称为内核支持的线程或轻量级进程。在多线程操作系统中，各个系统的实现方式并不相同，在有的系统中实现了用户级线程，有的系统中实现了内核级线程。&nbsp;</p>
<h3>用户级线程</h3>
<p>　　内核的切换由用户态程序自己控制内核切换,不需要内核干涉，少了进出内核态的消耗，但不能很好的利用多核Cpu。</p>
<p>　　<img src="https://images2017.cnblogs.com/blog/827651/201801/827651-20180121020547006-752791661.png" alt="" /></p>
<p>　　在用户空间模拟操作系统对进程的调度，来调用一个进程中的线程，每个进程中都会有一个运行时系统，用来调度线程。此时当该进程获取cpu时，进程内再调度出一个线程去执行，同一时刻只有一个线程执行。</p>
<h3>内核级线程</h3>
<p>　　&nbsp;内核级线程:切换由内核控制，当线程进行切换的时候，由用户态转化为内核态。切换完毕要从内核态返回用户态；可以很好的利用smp，即利用多核cpu。windows线程就是这样的。</p>
<p>　　<img src="https://images2017.cnblogs.com/blog/827651/201801/827651-20180121020859803-1526586154.png" alt="" /></p>
<div class="para">
<h3>用户级与内核级线程的对比</h3>
<div class="cnblogs_code" onclick="cnblogs_code_show('810b3da2-6b29-499c-b30b-e7e2b25e8104')"><img id="code_img_closed_810b3da2-6b29-499c-b30b-e7e2b25e8104" class="code_img_closed" src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="" /><img id="code_img_opened_810b3da2-6b29-499c-b30b-e7e2b25e8104" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('810b3da2-6b29-499c-b30b-e7e2b25e8104',event)" src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt="" />
<div id="cnblogs_code_open_810b3da2-6b29-499c-b30b-e7e2b25e8104" class="cnblogs_code_hide">
<pre><span style="color: #008080;">1</span> <span style="color: #000000;">内核支持线程是OS内核可感知的，而用户级线程是OS内核不可感知的。
</span><span style="color: #008080;">2</span> <span style="color: #000000;">用户级线程的创建、撤消和调度不需要OS内核的支持，是在语言（如Java）这一级处理的；而内核支持线程的创建、撤消和调度都需OS内核提供支持，而且与进程的创建、撤消和调度大体是相同的。
</span><span style="color: #008080;">3</span> <span style="color: #000000;">用户级线程执行系统调用指令时将导致其所属进程被中断，而内核支持线程执行系统调用指令时，只导致该线程被中断。
</span><span style="color: #008080;">4</span> <span style="color: #000000;">在只有用户级线程的系统内，CPU调度还是以进程为单位，处于运行状态的进程中的多个线程，由用户程序控制线程的轮换运行；在有内核支持线程的系统内，CPU调度则以线程为单位，由OS的线程调度程序负责线程的调度。
</span><span style="color: #008080;">5</span> 用户级线程的程序实体是运行在用户态下的程序，而内核支持线程的程序实体则是可以运行在任何状态下的程序。</pre>
</div>
<span class="cnblogs_code_collapse">用户级线程和内核级线程的区别</span></div>
<div class="cnblogs_code" onclick="cnblogs_code_show('641fd15e-7aff-49eb-a0bb-117a36017558')"><img id="code_img_closed_641fd15e-7aff-49eb-a0bb-117a36017558" class="code_img_closed" src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="" /><img id="code_img_opened_641fd15e-7aff-49eb-a0bb-117a36017558" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('641fd15e-7aff-49eb-a0bb-117a36017558',event)" src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt="" />
<div id="cnblogs_code_open_641fd15e-7aff-49eb-a0bb-117a36017558" class="cnblogs_code_hide">
<pre><span style="color: #000000;">优点：当有多个处理机时，一个进程的多个线程可以同时执行。
缺点：由内核进行调度。</span></pre>
</div>
<span class="cnblogs_code_collapse">内核线程的优缺点</span></div>
<div class="cnblogs_code" onclick="cnblogs_code_show('d1f77720-7e34-4579-959f-f917917e1618')"><img id="code_img_closed_d1f77720-7e34-4579-959f-f917917e1618" class="code_img_closed" src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="" /><img id="code_img_opened_d1f77720-7e34-4579-959f-f917917e1618" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('d1f77720-7e34-4579-959f-f917917e1618',event)" src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt="" />
<div id="cnblogs_code_open_d1f77720-7e34-4579-959f-f917917e1618" class="cnblogs_code_hide">
<pre><span style="color: #000000;">优点：
线程的调度不需要内核直接参与，控制简单。
可以在不支持线程的操作系统中实现。
创建和销毁线程、线程切换代价等线程管理的代价比内核线程少得多。
允许每个进程定制自己的调度算法，线程管理比较灵活。
线程能够利用的表空间和堆栈空间比内核级线程多。
同一进程中只能同时有一个线程在运行，如果有一个线程使用了系统调用而阻塞，那么整个进程都会被挂起。另外，页面失效也会产生同样的问题。
缺点：
资源调度按照进程进行，多个处理机下，同一个进程中的线程只能在同一个处理机下分时复用</span></pre>
</div>
<span class="cnblogs_code_collapse">用户级线程的优缺点</span></div>
<h3>混合实现</h3>
</div>
<p>　　用户级与内核级的多路复用，内核同一调度内核线程，每个内核线程对应n个用户线程</p>
<p>　　<img src="https://images2017.cnblogs.com/blog/827651/201801/827651-20180121021033553-698190505.png" alt="" /></p>
<h4>linux操作系统的 NPTL　　　　</h4>
<div class="cnblogs_code" onclick="cnblogs_code_show('e065bc98-3b66-4ef6-937e-d5de371fc0b6')"><img id="code_img_closed_e065bc98-3b66-4ef6-937e-d5de371fc0b6" class="code_img_closed" src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="" /><img id="code_img_opened_e065bc98-3b66-4ef6-937e-d5de371fc0b6" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('e065bc98-3b66-4ef6-937e-d5de371fc0b6',event)" src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt="" />
<div id="cnblogs_code_open_e065bc98-3b66-4ef6-937e-d5de371fc0b6" class="cnblogs_code_hide">
<pre><span style="color: #000000;">历史
在内核2.6以前的调度实体都是进程，内核并没有真正支持线程。它是能过一个系统调用clone()来实现的，这个调用创建了一份调用进程的拷贝，跟fork()不同的是,这份进程拷贝完全共享了调用进程的地址空间。LinuxThread就是通过这个系统调用来提供线程在内核级的支持的(许多以前的线程实现都完全是在用户态，内核根本不知道线程的存在)。非常不幸的是，这种方法有相当多的地方没有遵循POSIX标准，特别是在信号处理，调度，进程间通信原语等方面。

很显然，为了改进LinuxThread必须得到内核的支持，并且需要重写线程库。为了实现这个需求，开始有两个相互竞争的项目：IBM启动的NGTP(Next Generation POSIX Threads)项目，以及Redhat公司的NPTL。在2003年的年中，IBM放弃了NGTP，也就是大约那时，Redhat发布了最初的NPTL。

NPTL最开始在redhat linux 9里发布，现在从RHEL3起内核2.6起都支持NPTL，并且完全成了GNU C库的一部分。

 

设计
NPTL使用了跟LinuxThread相同的办法，在内核里面线程仍然被当作是一个进程，并且仍然使用了clone()系统调用(在NPTL库里调用)。但是，NPTL需要内核级的特殊支持来实现，比如需要挂起然后再唤醒线程的线程同步原语futex.

NPTL也是一个1</span>*<span style="color: #000000;">1的线程库，就是说，当你使用pthread_create()调用创建一个线程后，在内核里就相应创建了一个调度实体，在linux里就是一个新进程，这个方法最大可能的简化了线程的实现。

除NPTL的1</span>*1模型外还有一个m*n模型，通常这种模型的用户线程数会比内核的调度实体多。在这种实现里，线程库本身必须去处理可能存在的调度，这样在线程库内部的上下文切换通常都会相当的快，因为它避免了系统调用转到内核态。然而这种模型增加了线程实现的复杂性,并可能出现诸如优先级反转的问题，此外，用户态的调度如何跟内核态的调度进行协调也是很难让人满意。</pre>
</div>
<span class="cnblogs_code_collapse">介绍</span></div>
<div style="text-align: right;"><a href="#_labelTop">回到顶部</a><a name="_label8"></a></div>
<h1>线程和python</h1>
<div style="text-align: right;"><a href="#_labelTop">回到顶部</a><a name="_label9"></a></div>
<h2>理论知识</h2>
<h3>全局解释器锁GIL</h3>
<p>　　Python代码的执行由Python虚拟机(也叫解释器主循环)来控制。Python在设计之初就考虑到要在主循环中，同时只有一个线程在执行。虽然 Python 解释器中可以&ldquo;运行&rdquo;多个线程，但在任意时刻只有一个线程在解释器中运行。<br />　　对Python虚拟机的访问由全局解释器锁(GIL)来控制，正是这个锁能保证同一时刻只有一个线程在运行。</p>
<p>　　在多线程环境中，Python 虚拟机按以下方式执行：</p>
<p>　　a、设置 GIL；</p>
<p>　　b、切换到一个线程去运行；</p>
<p>　　c、运行指定数量的字节码指令或者线程主动让出控制(可以调用 time.sleep(0))；</p>
<p>　　d、把线程设置为睡眠状态；</p>
<p>　　e、解锁 GIL；</p>
<p>　　d、再次重复以上所有步骤。<br />　　在调用外部代码(如 C/C++扩展函数)的时候，GIL将会被锁定，直到这个函数结束为止(由于在这期间没有Python的字节码被运行，所以不会做线程切换)编写扩展的程序员可以主动解锁GIL。</p>
<h3>python线程模块的选择</h3>
<p>　　Python提供了几个用于多线程编程的模块，包括thread、threading和Queue等。thread和threading模块允许程序员创建和管理线程。thread模块提供了基本的线程和锁的支持，threading提供了更高级别、功能更强的线程管理的功能。Queue模块允许用户创建一个可以用于多个线程之间共享数据的队列数据结构。<br />　　避免使用thread模块，因为更高级别的threading模块更为先进，对线程的支持更为完善，而且使用thread模块里的属性有可能会与threading出现冲突；其次低级别的thread模块的同步原语很少(实际上只有一个)，而threading模块则有很多；再者，thread模块中当主线程结束时，所有的线程都会被强制结束掉，没有警告也不会有正常的清除工作，至少threading模块能确保重要的子线程退出后进程才退出。&nbsp;</p>
<p>　　thread模块不支持守护线程，当主线程退出时，所有的子线程不论它们是否还在工作，都会被强行退出。而threading模块支持守护线程，守护线程一般是一个等待客户请求的服务器，如果没有客户提出请求它就在那等着，如果设定一个线程为守护线程，就表示这个线程是不重要的，在进程退出的时候，不用等待这个线程退出。</p>
<h2>threading模块</h2>
<p>multiprocess模块的完全模仿了threading模块的接口，二者在使用层面，有很大的相似性，因而不再详细介绍（<a href="https://docs.python.org/3/library/threading.html?highlight=threading#" target="_blank">官方链接</a>）</p>
<div style="text-align: right;"><a href="#_labelTop">回到顶部</a><a name="_label10"></a></div>
<h3>线程的创建Threading.Thread类</h3>
<h4>线程的创建</h4>
<div class="cnblogs_code" onclick="cnblogs_code_show('0de93377-d9ea-4ff0-abf9-dbe97056bfcf')"><img id="code_img_closed_0de93377-d9ea-4ff0-abf9-dbe97056bfcf" class="code_img_closed" src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="" /><img id="code_img_opened_0de93377-d9ea-4ff0-abf9-dbe97056bfcf" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('0de93377-d9ea-4ff0-abf9-dbe97056bfcf',event)" src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt="" />
<div id="cnblogs_code_open_0de93377-d9ea-4ff0-abf9-dbe97056bfcf" class="cnblogs_code_hide">
<pre><span style="color: #0000ff;">from</span> threading <span style="color: #0000ff;">import</span><span style="color: #000000;"> Thread
</span><span style="color: #0000ff;">import</span><span style="color: #000000;"> time
</span><span style="color: #0000ff;">def</span><span style="color: #000000;"> sayhi(name):
    time.sleep(</span>2<span style="color: #000000;">)
    </span><span style="color: #0000ff;">print</span>(<span style="color: #800000;">'</span><span style="color: #800000;">%s say hello</span><span style="color: #800000;">'</span> %<span style="color: #000000;">name)

</span><span style="color: #0000ff;">if</span> <span style="color: #800080;">__name__</span> == <span style="color: #800000;">'</span><span style="color: #800000;">__main__</span><span style="color: #800000;">'</span><span style="color: #000000;">:
    t</span>=Thread(target=sayhi,args=(<span style="color: #800000;">'</span><span style="color: #800000;">egon</span><span style="color: #800000;">'</span><span style="color: #000000;">,))
    t.start()
    </span><span style="color: #0000ff;">print</span>(<span style="color: #800000;">'</span><span style="color: #800000;">主线程</span><span style="color: #800000;">'</span>)</pre>
</div>
<span class="cnblogs_code_collapse">创建线程的方式1</span></div>
<div class="cnblogs_code" onclick="cnblogs_code_show('a6b75f83-e66c-4fce-a63a-e486d4508ec5')"><img id="code_img_closed_a6b75f83-e66c-4fce-a63a-e486d4508ec5" class="code_img_closed" src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="" /><img id="code_img_opened_a6b75f83-e66c-4fce-a63a-e486d4508ec5" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('a6b75f83-e66c-4fce-a63a-e486d4508ec5',event)" src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt="" />
<div id="cnblogs_code_open_a6b75f83-e66c-4fce-a63a-e486d4508ec5" class="cnblogs_code_hide">
<pre><span style="color: #0000ff;">from</span> threading <span style="color: #0000ff;">import</span><span style="color: #000000;"> Thread
</span><span style="color: #0000ff;">import</span><span style="color: #000000;"> time
</span><span style="color: #0000ff;">class</span><span style="color: #000000;"> Sayhi(Thread):
    </span><span style="color: #0000ff;">def</span> <span style="color: #800080;">__init__</span><span style="color: #000000;">(self,name):
        super().</span><span style="color: #800080;">__init__</span><span style="color: #000000;">()
        self.name</span>=<span style="color: #000000;">name
    </span><span style="color: #0000ff;">def</span><span style="color: #000000;"> run(self):
        time.sleep(</span>2<span style="color: #000000;">)
        </span><span style="color: #0000ff;">print</span>(<span style="color: #800000;">'</span><span style="color: #800000;">%s say hello</span><span style="color: #800000;">'</span> %<span style="color: #000000;"> self.name)


</span><span style="color: #0000ff;">if</span> <span style="color: #800080;">__name__</span> == <span style="color: #800000;">'</span><span style="color: #800000;">__main__</span><span style="color: #800000;">'</span><span style="color: #000000;">:
    t </span>= Sayhi(<span style="color: #800000;">'</span><span style="color: #800000;">egon</span><span style="color: #800000;">'</span><span style="color: #000000;">)
    t.start()
    </span><span style="color: #0000ff;">print</span>(<span style="color: #800000;">'</span><span style="color: #800000;">主线程</span><span style="color: #800000;">'</span>)</pre>
</div>
<span class="cnblogs_code_collapse">创建线程的方式2</span></div>
<h4>多线程与多进程</h4>
<div class="cnblogs_code" onclick="cnblogs_code_show('7aa932fd-9215-4081-8b7a-d3f32cf02337')"><img id="code_img_closed_7aa932fd-9215-4081-8b7a-d3f32cf02337" class="code_img_closed" src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="" /><img id="code_img_opened_7aa932fd-9215-4081-8b7a-d3f32cf02337" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('7aa932fd-9215-4081-8b7a-d3f32cf02337',event)" src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt="" />
<div id="cnblogs_code_open_7aa932fd-9215-4081-8b7a-d3f32cf02337" class="cnblogs_code_hide">
<pre><span style="color: #0000ff;">from</span> threading <span style="color: #0000ff;">import</span><span style="color: #000000;"> Thread
</span><span style="color: #0000ff;">from</span> multiprocessing <span style="color: #0000ff;">import</span><span style="color: #000000;"> Process
</span><span style="color: #0000ff;">import</span><span style="color: #000000;"> os

</span><span style="color: #0000ff;">def</span><span style="color: #000000;"> work():
    </span><span style="color: #0000ff;">print</span>(<span style="color: #800000;">'</span><span style="color: #800000;">hello</span><span style="color: #800000;">'</span><span style="color: #000000;">,os.getpid())

</span><span style="color: #0000ff;">if</span> <span style="color: #800080;">__name__</span> == <span style="color: #800000;">'</span><span style="color: #800000;">__main__</span><span style="color: #800000;">'</span><span style="color: #000000;">:
    </span><span style="color: #008000;">#</span><span style="color: #008000;">part1:在主进程下开启多个线程,每个线程都跟主进程的pid一样</span>
    t1=Thread(target=<span style="color: #000000;">work)
    t2</span>=Thread(target=<span style="color: #000000;">work)
    t1.start()
    t2.start()
    </span><span style="color: #0000ff;">print</span>(<span style="color: #800000;">'</span><span style="color: #800000;">主线程/主进程pid</span><span style="color: #800000;">'</span><span style="color: #000000;">,os.getpid())

    </span><span style="color: #008000;">#</span><span style="color: #008000;">part2:开多个进程,每个进程都有不同的pid</span>
    p1=Process(target=<span style="color: #000000;">work)
    p2</span>=Process(target=<span style="color: #000000;">work)
    p1.start()
    p2.start()
    </span><span style="color: #0000ff;">print</span>(<span style="color: #800000;">'</span><span style="color: #800000;">主线程/主进程pid</span><span style="color: #800000;">'</span>,os.getpid())</pre>
</div>
<span class="cnblogs_code_collapse">pid的比较</span></div>
<div class="cnblogs_code" onclick="cnblogs_code_show('82cae2e4-43bc-40cf-bc32-3877027a52e2')"><img id="code_img_closed_82cae2e4-43bc-40cf-bc32-3877027a52e2" class="code_img_closed" src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="" /><img id="code_img_opened_82cae2e4-43bc-40cf-bc32-3877027a52e2" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('82cae2e4-43bc-40cf-bc32-3877027a52e2',event)" src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt="" />
<div id="cnblogs_code_open_82cae2e4-43bc-40cf-bc32-3877027a52e2" class="cnblogs_code_hide">
<pre><span style="color: #0000ff;">from</span> threading <span style="color: #0000ff;">import</span><span style="color: #000000;"> Thread
</span><span style="color: #0000ff;">from</span> multiprocessing <span style="color: #0000ff;">import</span><span style="color: #000000;"> Process
</span><span style="color: #0000ff;">import</span><span style="color: #000000;"> os

</span><span style="color: #0000ff;">def</span><span style="color: #000000;"> work():
    </span><span style="color: #0000ff;">print</span>(<span style="color: #800000;">'</span><span style="color: #800000;">hello</span><span style="color: #800000;">'</span><span style="color: #000000;">)

</span><span style="color: #0000ff;">if</span> <span style="color: #800080;">__name__</span> == <span style="color: #800000;">'</span><span style="color: #800000;">__main__</span><span style="color: #800000;">'</span><span style="color: #000000;">:
    </span><span style="color: #008000;">#</span><span style="color: #008000;">在主进程下开启线程</span>
    t=Thread(target=<span style="color: #000000;">work)
    t.start()
    </span><span style="color: #0000ff;">print</span>(<span style="color: #800000;">'</span><span style="color: #800000;">主线程/主进程</span><span style="color: #800000;">'</span><span style="color: #000000;">)
    </span><span style="color: #800000;">'''</span><span style="color: #800000;">
    打印结果:
    hello
    主线程/主进程
    </span><span style="color: #800000;">'''</span>

    <span style="color: #008000;">#</span><span style="color: #008000;">在主进程下开启子进程</span>
    t=Process(target=<span style="color: #000000;">work)
    t.start()
    </span><span style="color: #0000ff;">print</span>(<span style="color: #800000;">'</span><span style="color: #800000;">主线程/主进程</span><span style="color: #800000;">'</span><span style="color: #000000;">)
    </span><span style="color: #800000;">'''</span><span style="color: #800000;">
    打印结果:
    主线程/主进程
    hello
    </span><span style="color: #800000;">'''</span></pre>
</div>
<span class="cnblogs_code_collapse">开启效率的较量</span></div>
<div class="cnblogs_code" onclick="cnblogs_code_show('ac68cd6b-c49c-48e5-98f3-8fce677ec822')"><img id="code_img_closed_ac68cd6b-c49c-48e5-98f3-8fce677ec822" class="code_img_closed" src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="" /><img id="code_img_opened_ac68cd6b-c49c-48e5-98f3-8fce677ec822" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('ac68cd6b-c49c-48e5-98f3-8fce677ec822',event)" src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt="" />
<div id="cnblogs_code_open_ac68cd6b-c49c-48e5-98f3-8fce677ec822" class="cnblogs_code_hide">
<pre><span style="color: #0000ff;">from</span>  threading <span style="color: #0000ff;">import</span><span style="color: #000000;"> Thread
</span><span style="color: #0000ff;">from</span> multiprocessing <span style="color: #0000ff;">import</span><span style="color: #000000;"> Process
</span><span style="color: #0000ff;">import</span><span style="color: #000000;"> os
</span><span style="color: #0000ff;">def</span><span style="color: #000000;"> work():
    </span><span style="color: #0000ff;">global</span><span style="color: #000000;"> n
    n</span>=<span style="color: #000000;">0

</span><span style="color: #0000ff;">if</span> <span style="color: #800080;">__name__</span> == <span style="color: #800000;">'</span><span style="color: #800000;">__main__</span><span style="color: #800000;">'</span><span style="color: #000000;">:
    </span><span style="color: #008000;">#</span><span style="color: #008000;"> n=100</span>
    <span style="color: #008000;">#</span><span style="color: #008000;"> p=Process(target=work)</span>
    <span style="color: #008000;">#</span><span style="color: #008000;"> p.start()</span>
    <span style="color: #008000;">#</span><span style="color: #008000;"> p.join()</span>
    <span style="color: #008000;">#</span><span style="color: #008000;"> print('主',n) #毫无疑问子进程p已经将自己的全局的n改成了0,但改的仅仅是它自己的,查看父进程的n仍然为100</span>
<span style="color: #000000;">

    n</span>=1<span style="color: #000000;">
    t</span>=Thread(target=<span style="color: #000000;">work)
    t.start()
    t.join()
    </span><span style="color: #0000ff;">print</span>(<span style="color: #800000;">'</span><span style="color: #800000;">主</span><span style="color: #800000;">'</span>,n) <span style="color: #008000;">#</span><span style="color: #008000;">查看结果为0,因为同一进程内的线程之间共享进程内的数据</span>
同一进程内的线程共享该进程的数据？</pre>
</div>
<span class="cnblogs_code_collapse">内存数据的共享问题</span></div>
<h4>练习 ：多线程实现socket</h4>
<div class="cnblogs_code" onclick="cnblogs_code_show('63f043e2-9e00-4af1-8180-81e41232bb05')"><img id="code_img_closed_63f043e2-9e00-4af1-8180-81e41232bb05" class="code_img_closed" src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="" /><img id="code_img_opened_63f043e2-9e00-4af1-8180-81e41232bb05" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('63f043e2-9e00-4af1-8180-81e41232bb05',event)" src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt="" />
<div id="cnblogs_code_open_63f043e2-9e00-4af1-8180-81e41232bb05" class="cnblogs_code_hide">
<pre><span style="color: #008000;">#</span><span style="color: #008000;">_*_coding:utf-8_*_</span><span style="color: #008000;">
#</span><span style="color: #008000;">!/usr/bin/env python</span>
<span style="color: #0000ff;">import</span><span style="color: #000000;"> multiprocessing
</span><span style="color: #0000ff;">import</span><span style="color: #000000;"> threading

</span><span style="color: #0000ff;">import</span><span style="color: #000000;"> socket
s</span>=<span style="color: #000000;">socket.socket(socket.AF_INET,socket.SOCK_STREAM)
s.bind((</span><span style="color: #800000;">'</span><span style="color: #800000;">127.0.0.1</span><span style="color: #800000;">'</span>,8080<span style="color: #000000;">))
s.listen(</span>5<span style="color: #000000;">)

</span><span style="color: #0000ff;">def</span><span style="color: #000000;"> action(conn):
    </span><span style="color: #0000ff;">while</span><span style="color: #000000;"> True:
        data</span>=conn.recv(1024<span style="color: #000000;">)
        </span><span style="color: #0000ff;">print</span><span style="color: #000000;">(data)
        conn.send(data.upper())

</span><span style="color: #0000ff;">if</span> <span style="color: #800080;">__name__</span> == <span style="color: #800000;">'</span><span style="color: #800000;">__main__</span><span style="color: #800000;">'</span><span style="color: #000000;">:

    </span><span style="color: #0000ff;">while</span><span style="color: #000000;"> True:
        conn,addr</span>=<span style="color: #000000;">s.accept()


        p</span>=threading.Thread(target=action,args=<span style="color: #000000;">(conn,))
        p.start()</span></pre>
</div>
<span class="cnblogs_code_collapse">server</span></div>
<div class="cnblogs_code" onclick="cnblogs_code_show('00d3362b-deb9-4f1e-b65e-3cbdd6c2b5b6')"><img id="code_img_closed_00d3362b-deb9-4f1e-b65e-3cbdd6c2b5b6" class="code_img_closed" src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="" /><img id="code_img_opened_00d3362b-deb9-4f1e-b65e-3cbdd6c2b5b6" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('00d3362b-deb9-4f1e-b65e-3cbdd6c2b5b6',event)" src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt="" />
<div id="cnblogs_code_open_00d3362b-deb9-4f1e-b65e-3cbdd6c2b5b6" class="cnblogs_code_hide">
<pre><span style="color: #008000;">#</span><span style="color: #008000;">_*_coding:utf-8_*_</span><span style="color: #008000;">
#</span><span style="color: #008000;">!/usr/bin/env python</span>


<span style="color: #0000ff;">import</span><span style="color: #000000;"> socket

s</span>=<span style="color: #000000;">socket.socket(socket.AF_INET,socket.SOCK_STREAM)
s.connect((</span><span style="color: #800000;">'</span><span style="color: #800000;">127.0.0.1</span><span style="color: #800000;">'</span>,8080<span style="color: #000000;">))

</span><span style="color: #0000ff;">while</span><span style="color: #000000;"> True:
    msg</span>=input(<span style="color: #800000;">'</span><span style="color: #800000;">&gt;&gt;: </span><span style="color: #800000;">'</span><span style="color: #000000;">).strip()
    </span><span style="color: #0000ff;">if</span> <span style="color: #0000ff;">not</span> msg:<span style="color: #0000ff;">continue</span><span style="color: #000000;">

    s.send(msg.encode(</span><span style="color: #800000;">'</span><span style="color: #800000;">utf-8</span><span style="color: #800000;">'</span><span style="color: #000000;">))
    data</span>=s.recv(1024<span style="color: #000000;">)
    </span><span style="color: #0000ff;">print</span>(data)</pre>
</div>
<span class="cnblogs_code_collapse">client</span></div>
<h4>Thread类的其他方法</h4>
<div class="cnblogs_code">
<pre><span style="color: #000000;">Thread实例对象的方法
  </span><span style="color: #008000;">#</span><span style="color: #008000;"> isAlive(): 返回线程是否活动的。</span>
  <span style="color: #008000;">#</span><span style="color: #008000;"> getName(): 返回线程名。</span>
  <span style="color: #008000;">#</span><span style="color: #008000;"> setName(): 设置线程名。</span>
<span style="color: #000000;">
threading模块提供的一些方法：
  </span><span style="color: #008000;">#</span><span style="color: #008000;"> threading.currentThread(): 返回当前的线程变量。</span>
  <span style="color: #008000;">#</span><span style="color: #008000;"> threading.enumerate(): 返回一个包含正在运行的线程的list。正在运行指线程启动后、结束前，不包括启动前和终止后的线程。</span>
  <span style="color: #008000;">#</span><span style="color: #008000;"> threading.activeCount(): 返回正在运行的线程数量，与len(threading.enumerate())有相同的结果。</span></pre>
</div>
<div class="cnblogs_code" onclick="cnblogs_code_show('4e551202-57db-4895-884b-ef47d4210e18')"><img id="code_img_closed_4e551202-57db-4895-884b-ef47d4210e18" class="code_img_closed" src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="" /><img id="code_img_opened_4e551202-57db-4895-884b-ef47d4210e18" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('4e551202-57db-4895-884b-ef47d4210e18',event)" src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt="" />
<div id="cnblogs_code_open_4e551202-57db-4895-884b-ef47d4210e18" class="cnblogs_code_hide">
<pre><span style="color: #0000ff;">from</span> threading <span style="color: #0000ff;">import</span><span style="color: #000000;"> Thread
</span><span style="color: #0000ff;">import</span><span style="color: #000000;"> threading
</span><span style="color: #0000ff;">from</span> multiprocessing <span style="color: #0000ff;">import</span><span style="color: #000000;"> Process
</span><span style="color: #0000ff;">import</span><span style="color: #000000;"> os

</span><span style="color: #0000ff;">def</span><span style="color: #000000;"> work():
    </span><span style="color: #0000ff;">import</span><span style="color: #000000;"> time
    time.sleep(</span>3<span style="color: #000000;">)
    </span><span style="color: #0000ff;">print</span><span style="color: #000000;">(threading.current_thread().getName())


</span><span style="color: #0000ff;">if</span> <span style="color: #800080;">__name__</span> == <span style="color: #800000;">'</span><span style="color: #800000;">__main__</span><span style="color: #800000;">'</span><span style="color: #000000;">:
    </span><span style="color: #008000;">#</span><span style="color: #008000;">在主进程下开启线程</span>
    t=Thread(target=<span style="color: #000000;">work)
    t.start()

    </span><span style="color: #0000ff;">print</span><span style="color: #000000;">(threading.current_thread().getName())
    </span><span style="color: #0000ff;">print</span>(threading.current_thread()) <span style="color: #008000;">#</span><span style="color: #008000;">主线程</span>
    <span style="color: #0000ff;">print</span>(threading.enumerate()) <span style="color: #008000;">#</span><span style="color: #008000;">连同主线程在内有两个运行的线程</span>
    <span style="color: #0000ff;">print</span><span style="color: #000000;">(threading.active_count())
    </span><span style="color: #0000ff;">print</span>(<span style="color: #800000;">'</span><span style="color: #800000;">主线程/主进程</span><span style="color: #800000;">'</span><span style="color: #000000;">)

    </span><span style="color: #800000;">'''</span><span style="color: #800000;">
    打印结果:
    MainThread
    &lt;_MainThread(MainThread, started 140735268892672)&gt;
    [&lt;_MainThread(MainThread, started 140735268892672)&gt;, &lt;Thread(Thread-1, started 123145307557888)&gt;]
    主线程/主进程
    Thread-1
    </span><span style="color: #800000;">'''</span></pre>
</div>
<span class="cnblogs_code_collapse">代码示例</span></div>
<div class="cnblogs_code" onclick="cnblogs_code_show('209eab7c-c86d-4a75-a29f-ecba99a5f510')"><img id="code_img_closed_209eab7c-c86d-4a75-a29f-ecba99a5f510" class="code_img_closed" src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="" /><img id="code_img_opened_209eab7c-c86d-4a75-a29f-ecba99a5f510" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('209eab7c-c86d-4a75-a29f-ecba99a5f510',event)" src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt="" />
<div id="cnblogs_code_open_209eab7c-c86d-4a75-a29f-ecba99a5f510" class="cnblogs_code_hide">
<pre><span style="color: #0000ff;">from</span> threading <span style="color: #0000ff;">import</span><span style="color: #000000;"> Thread
</span><span style="color: #0000ff;">import</span><span style="color: #000000;"> time
</span><span style="color: #0000ff;">def</span><span style="color: #000000;"> sayhi(name):
    time.sleep(</span>2<span style="color: #000000;">)
    </span><span style="color: #0000ff;">print</span>(<span style="color: #800000;">'</span><span style="color: #800000;">%s say hello</span><span style="color: #800000;">'</span> %<span style="color: #000000;">name)

</span><span style="color: #0000ff;">if</span> <span style="color: #800080;">__name__</span> == <span style="color: #800000;">'</span><span style="color: #800000;">__main__</span><span style="color: #800000;">'</span><span style="color: #000000;">:
    t</span>=Thread(target=sayhi,args=(<span style="color: #800000;">'</span><span style="color: #800000;">egon</span><span style="color: #800000;">'</span><span style="color: #000000;">,))
    t.start()
    t.join()
    </span><span style="color: #0000ff;">print</span>(<span style="color: #800000;">'</span><span style="color: #800000;">主线程</span><span style="color: #800000;">'</span><span style="color: #000000;">)
    </span><span style="color: #0000ff;">print</span><span style="color: #000000;">(t.is_alive())
    </span><span style="color: #800000;">'''</span><span style="color: #800000;">
    egon say hello
    主线程
    False
    </span><span style="color: #800000;">'''</span></pre>
</div>
<span class="cnblogs_code_collapse">join方法</span></div>
<h4>守护线程</h4>
<p><strong>无论是进程还是线程，都遵循：守护xx会等待主xx运行完毕后被销毁。</strong><strong>需要强调的是：运行完毕并非终止运行</strong></p>
<div class="cnblogs_code">
<pre><span style="color: #008000;">#</span><span style="color: #008000;">1.对主进程来说，运行完毕指的是主进程代码运行完毕</span><span style="color: #008000;">
#</span><span style="color: #008000;">2.对主线程来说，运行完毕指的是主线程所在的进程内所有非守护线程统统运行完毕，主线程才算运行完毕</span></pre>
</div>
<div class="cnblogs_code" onclick="cnblogs_code_show('c9e29e49-17d4-4d80-a378-1fc1b52b44bb')"><img id="code_img_closed_c9e29e49-17d4-4d80-a378-1fc1b52b44bb" class="code_img_closed" src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="" /><img id="code_img_opened_c9e29e49-17d4-4d80-a378-1fc1b52b44bb" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('c9e29e49-17d4-4d80-a378-1fc1b52b44bb',event)" src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt="" />
<div id="cnblogs_code_open_c9e29e49-17d4-4d80-a378-1fc1b52b44bb" class="cnblogs_code_hide">
<pre><span style="color: #008000;">#</span><span style="color: #008000;">1 主进程在其代码结束后就已经算运行完毕了（守护进程在此时就被回收）,然后主进程会一直等非守护的子进程都运行完毕后回收子进程的资源(否则会产生僵尸进程)，才会结束，</span><span style="color: #008000;">
#</span><span style="color: #008000;">2 主线程在其他非守护线程运行完毕后才算运行完毕（守护线程在此时就被回收）。因为主线程的结束意味着进程的结束，进程整体的资源都将被回收，而进程必须保证非守护线程都运行完毕后才能结束。</span></pre>
</div>
<span class="cnblogs_code_collapse">详细解释</span></div>
<div class="cnblogs_code" onclick="cnblogs_code_show('6ae48500-0236-43b8-84ed-e9f8dd80ed17')"><img id="code_img_closed_6ae48500-0236-43b8-84ed-e9f8dd80ed17" class="code_img_closed" src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="" /><img id="code_img_opened_6ae48500-0236-43b8-84ed-e9f8dd80ed17" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('6ae48500-0236-43b8-84ed-e9f8dd80ed17',event)" src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt="" />
<div id="cnblogs_code_open_6ae48500-0236-43b8-84ed-e9f8dd80ed17" class="cnblogs_code_hide">
<pre><span style="color: #0000ff;">from</span> threading <span style="color: #0000ff;">import</span><span style="color: #000000;"> Thread
</span><span style="color: #0000ff;">import</span><span style="color: #000000;"> time
</span><span style="color: #0000ff;">def</span><span style="color: #000000;"> sayhi(name):
    time.sleep(</span>2<span style="color: #000000;">)
    </span><span style="color: #0000ff;">print</span>(<span style="color: #800000;">'</span><span style="color: #800000;">%s say hello</span><span style="color: #800000;">'</span> %<span style="color: #000000;">name)

</span><span style="color: #0000ff;">if</span> <span style="color: #800080;">__name__</span> == <span style="color: #800000;">'</span><span style="color: #800000;">__main__</span><span style="color: #800000;">'</span><span style="color: #000000;">:
    t</span>=Thread(target=sayhi,args=(<span style="color: #800000;">'</span><span style="color: #800000;">egon</span><span style="color: #800000;">'</span><span style="color: #000000;">,))
    t.setDaemon(True) </span><span style="color: #008000;">#</span><span style="color: #008000;">必须在t.start()之前设置</span>
<span style="color: #000000;">    t.start()

    </span><span style="color: #0000ff;">print</span>(<span style="color: #800000;">'</span><span style="color: #800000;">主线程</span><span style="color: #800000;">'</span><span style="color: #000000;">)
    </span><span style="color: #0000ff;">print</span><span style="color: #000000;">(t.is_alive())
    </span><span style="color: #800000;">'''</span><span style="color: #800000;">
    主线程
    True
    </span><span style="color: #800000;">'''</span></pre>
</div>
<span class="cnblogs_code_collapse">守护线程例1</span></div>
<div class="cnblogs_code" onclick="cnblogs_code_show('ce14a2c0-5100-4429-9be3-3b7cb6a1dbad')"><img id="code_img_closed_ce14a2c0-5100-4429-9be3-3b7cb6a1dbad" class="code_img_closed" src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="" /><img id="code_img_opened_ce14a2c0-5100-4429-9be3-3b7cb6a1dbad" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('ce14a2c0-5100-4429-9be3-3b7cb6a1dbad',event)" src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt="" />
<div id="cnblogs_code_open_ce14a2c0-5100-4429-9be3-3b7cb6a1dbad" class="cnblogs_code_hide">
<pre><span style="color: #0000ff;">from</span> threading <span style="color: #0000ff;">import</span><span style="color: #000000;"> Thread
</span><span style="color: #0000ff;">import</span><span style="color: #000000;"> time
</span><span style="color: #0000ff;">def</span><span style="color: #000000;"> foo():
    </span><span style="color: #0000ff;">print</span>(123<span style="color: #000000;">)
    time.sleep(</span>1<span style="color: #000000;">)
    </span><span style="color: #0000ff;">print</span>(<span style="color: #800000;">"</span><span style="color: #800000;">end123</span><span style="color: #800000;">"</span><span style="color: #000000;">)

</span><span style="color: #0000ff;">def</span><span style="color: #000000;"> bar():
    </span><span style="color: #0000ff;">print</span>(456<span style="color: #000000;">)
    time.sleep(</span>3<span style="color: #000000;">)
    </span><span style="color: #0000ff;">print</span>(<span style="color: #800000;">"</span><span style="color: #800000;">end456</span><span style="color: #800000;">"</span><span style="color: #000000;">)


t1</span>=Thread(target=<span style="color: #000000;">foo)
t2</span>=Thread(target=<span style="color: #000000;">bar)

t1.daemon</span>=<span style="color: #000000;">True
t1.start()
t2.start()
</span><span style="color: #0000ff;">print</span>(<span style="color: #800000;">"</span><span style="color: #800000;">main-------</span><span style="color: #800000;">"</span>)</pre>
</div>
<span class="cnblogs_code_collapse">守护线程例2</span></div>
<div style="text-align: right;"><a href="#_labelTop">回到顶部</a><a name="_label11"></a></div>
<h3>锁</h3>
<h4>锁与GIL</h4>
<p>&nbsp;</p>
<h4>同步锁</h4>
<div class="cnblogs_code" onclick="cnblogs_code_show('06d17dd4-cab3-4dae-b4c2-0454b81d4cc6')"><img id="code_img_closed_06d17dd4-cab3-4dae-b4c2-0454b81d4cc6" class="code_img_closed" src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="" /><img id="code_img_opened_06d17dd4-cab3-4dae-b4c2-0454b81d4cc6" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('06d17dd4-cab3-4dae-b4c2-0454b81d4cc6',event)" src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt="" />
<div id="cnblogs_code_open_06d17dd4-cab3-4dae-b4c2-0454b81d4cc6" class="cnblogs_code_hide">
<pre><span style="color: #0000ff;">from</span> threading <span style="color: #0000ff;">import</span><span style="color: #000000;"> Thread
</span><span style="color: #0000ff;">import</span><span style="color: #000000;"> os,time
</span><span style="color: #0000ff;">def</span><span style="color: #000000;"> work():
    </span><span style="color: #0000ff;">global</span><span style="color: #000000;"> n
    temp</span>=<span style="color: #000000;">n
    time.sleep(</span>0.1<span style="color: #000000;">)
    n</span>=temp-1
<span style="color: #0000ff;">if</span> <span style="color: #800080;">__name__</span> == <span style="color: #800000;">'</span><span style="color: #800000;">__main__</span><span style="color: #800000;">'</span><span style="color: #000000;">:
    n</span>=100<span style="color: #000000;">
    l</span>=<span style="color: #000000;">[]
    </span><span style="color: #0000ff;">for</span> i <span style="color: #0000ff;">in</span> range(100<span style="color: #000000;">):
        p</span>=Thread(target=<span style="color: #000000;">work)
        l.append(p)
        p.start()
    </span><span style="color: #0000ff;">for</span> p <span style="color: #0000ff;">in</span><span style="color: #000000;"> l:
        p.join()

    </span><span style="color: #0000ff;">print</span>(n) <span style="color: #008000;">#</span><span style="color: #008000;">结果可能为99</span></pre>
</div>
<span class="cnblogs_code_collapse">多个线程抢占资源的情况</span></div>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">import</span><span style="color: #000000;"> threading
R</span>=<span style="color: #000000;">threading.Lock()
R.acquire()
</span><span style="color: #800000;">'''</span><span style="color: #800000;">
对公共数据的操作
</span><span style="color: #800000;">'''</span><span style="color: #000000;">
R.release()</span></pre>
</div>
<div class="cnblogs_code" onclick="cnblogs_code_show('fcf3d4bc-7f56-4652-bb78-ca66f14e7f09')"><img id="code_img_closed_fcf3d4bc-7f56-4652-bb78-ca66f14e7f09" class="code_img_closed" src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="" /><img id="code_img_opened_fcf3d4bc-7f56-4652-bb78-ca66f14e7f09" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('fcf3d4bc-7f56-4652-bb78-ca66f14e7f09',event)" src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt="" />
<div id="cnblogs_code_open_fcf3d4bc-7f56-4652-bb78-ca66f14e7f09" class="cnblogs_code_hide">
<pre><span style="color: #0000ff;">from</span> threading <span style="color: #0000ff;">import</span><span style="color: #000000;"> Thread,Lock
</span><span style="color: #0000ff;">import</span><span style="color: #000000;"> os,time
</span><span style="color: #0000ff;">def</span><span style="color: #000000;"> work():
    </span><span style="color: #0000ff;">global</span><span style="color: #000000;"> n
    lock.acquire()
    temp</span>=<span style="color: #000000;">n
    time.sleep(</span>0.1<span style="color: #000000;">)
    n</span>=temp-1<span style="color: #000000;">
    lock.release()
</span><span style="color: #0000ff;">if</span> <span style="color: #800080;">__name__</span> == <span style="color: #800000;">'</span><span style="color: #800000;">__main__</span><span style="color: #800000;">'</span><span style="color: #000000;">:
    lock</span>=<span style="color: #000000;">Lock()
    n</span>=100<span style="color: #000000;">
    l</span>=<span style="color: #000000;">[]
    </span><span style="color: #0000ff;">for</span> i <span style="color: #0000ff;">in</span> range(100<span style="color: #000000;">):
        p</span>=Thread(target=<span style="color: #000000;">work)
        l.append(p)
        p.start()
    </span><span style="color: #0000ff;">for</span> p <span style="color: #0000ff;">in</span><span style="color: #000000;"> l:
        p.join()

    </span><span style="color: #0000ff;">print</span>(n) <span style="color: #008000;">#</span><span style="color: #008000;">结果肯定为0，由原来的并发执行变成串行，牺牲了执行效率保证了数据安全</span></pre>
</div>
<span class="cnblogs_code_collapse">同步锁的引用</span></div>
<div class="cnblogs_code" onclick="cnblogs_code_show('6056e103-8290-45cc-ae0c-5389489e28cc')"><img id="code_img_closed_6056e103-8290-45cc-ae0c-5389489e28cc" class="code_img_closed" src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="" /><img id="code_img_opened_6056e103-8290-45cc-ae0c-5389489e28cc" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('6056e103-8290-45cc-ae0c-5389489e28cc',event)" src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt="" />
<div id="cnblogs_code_open_6056e103-8290-45cc-ae0c-5389489e28cc" class="cnblogs_code_hide">
<pre><span style="color: #008000;">#</span><span style="color: #008000;">不加锁:并发执行,速度快,数据不安全</span>
<span style="color: #0000ff;">from</span> threading <span style="color: #0000ff;">import</span><span style="color: #000000;"> current_thread,Thread,Lock
</span><span style="color: #0000ff;">import</span><span style="color: #000000;"> os,time
</span><span style="color: #0000ff;">def</span><span style="color: #000000;"> task():
    </span><span style="color: #0000ff;">global</span><span style="color: #000000;"> n
    </span><span style="color: #0000ff;">print</span>(<span style="color: #800000;">'</span><span style="color: #800000;">%s is running</span><span style="color: #800000;">'</span> %<span style="color: #000000;">current_thread().getName())
    temp</span>=<span style="color: #000000;">n
    time.sleep(</span>0.5<span style="color: #000000;">)
    n</span>=temp-1


<span style="color: #0000ff;">if</span> <span style="color: #800080;">__name__</span> == <span style="color: #800000;">'</span><span style="color: #800000;">__main__</span><span style="color: #800000;">'</span><span style="color: #000000;">:
    n</span>=100<span style="color: #000000;">
    lock</span>=<span style="color: #000000;">Lock()
    threads</span>=<span style="color: #000000;">[]
    start_time</span>=<span style="color: #000000;">time.time()
    </span><span style="color: #0000ff;">for</span> i <span style="color: #0000ff;">in</span> range(100<span style="color: #000000;">):
        t</span>=Thread(target=<span style="color: #000000;">task)
        threads.append(t)
        t.start()
    </span><span style="color: #0000ff;">for</span> t <span style="color: #0000ff;">in</span><span style="color: #000000;"> threads:
        t.join()

    stop_time</span>=<span style="color: #000000;">time.time()
    </span><span style="color: #0000ff;">print</span>(<span style="color: #800000;">'</span><span style="color: #800000;">主:%s n:%s</span><span style="color: #800000;">'</span> %(stop_time-<span style="color: #000000;">start_time,n))

</span><span style="color: #800000;">'''</span><span style="color: #800000;">
Thread-1 is running
Thread-2 is running
......
Thread-100 is running
主:0.5216062068939209 n:99
</span><span style="color: #800000;">'''</span>


<span style="color: #008000;">#</span><span style="color: #008000;">不加锁:未加锁部分并发执行,加锁部分串行执行,速度慢,数据安全</span>
<span style="color: #0000ff;">from</span> threading <span style="color: #0000ff;">import</span><span style="color: #000000;"> current_thread,Thread,Lock
</span><span style="color: #0000ff;">import</span><span style="color: #000000;"> os,time
</span><span style="color: #0000ff;">def</span><span style="color: #000000;"> task():
    </span><span style="color: #008000;">#</span><span style="color: #008000;">未加锁的代码并发运行</span>
    time.sleep(3<span style="color: #000000;">)
    </span><span style="color: #0000ff;">print</span>(<span style="color: #800000;">'</span><span style="color: #800000;">%s start to run</span><span style="color: #800000;">'</span> %<span style="color: #000000;">current_thread().getName())
    </span><span style="color: #0000ff;">global</span><span style="color: #000000;"> n
    </span><span style="color: #008000;">#</span><span style="color: #008000;">加锁的代码串行运行</span>
<span style="color: #000000;">    lock.acquire()
    temp</span>=<span style="color: #000000;">n
    time.sleep(</span>0.5<span style="color: #000000;">)
    n</span>=temp-1<span style="color: #000000;">
    lock.release()

</span><span style="color: #0000ff;">if</span> <span style="color: #800080;">__name__</span> == <span style="color: #800000;">'</span><span style="color: #800000;">__main__</span><span style="color: #800000;">'</span><span style="color: #000000;">:
    n</span>=100<span style="color: #000000;">
    lock</span>=<span style="color: #000000;">Lock()
    threads</span>=<span style="color: #000000;">[]
    start_time</span>=<span style="color: #000000;">time.time()
    </span><span style="color: #0000ff;">for</span> i <span style="color: #0000ff;">in</span> range(100<span style="color: #000000;">):
        t</span>=Thread(target=<span style="color: #000000;">task)
        threads.append(t)
        t.start()
    </span><span style="color: #0000ff;">for</span> t <span style="color: #0000ff;">in</span><span style="color: #000000;"> threads:
        t.join()
    stop_time</span>=<span style="color: #000000;">time.time()
    </span><span style="color: #0000ff;">print</span>(<span style="color: #800000;">'</span><span style="color: #800000;">主:%s n:%s</span><span style="color: #800000;">'</span> %(stop_time-<span style="color: #000000;">start_time,n))

</span><span style="color: #800000;">'''</span><span style="color: #800000;">
Thread-1 is running
Thread-2 is running
......
Thread-100 is running
主:53.294203758239746 n:0
</span><span style="color: #800000;">'''</span>

<span style="color: #008000;">#</span><span style="color: #008000;">有的同学可能有疑问:既然加锁会让运行变成串行,那么我在start之后立即使用join,就不用加锁了啊,也是串行的效果啊</span><span style="color: #008000;">
#</span><span style="color: #008000;">没错:在start之后立刻使用jion,肯定会将100个任务的执行变成串行,毫无疑问,最终n的结果也肯定是0,是安全的,但问题是</span><span style="color: #008000;">
#</span><span style="color: #008000;">start后立即join:任务内的所有代码都是串行执行的,而加锁,只是加锁的部分即修改共享数据的部分是串行的</span><span style="color: #008000;">
#</span><span style="color: #008000;">单从保证数据安全方面,二者都可以实现,但很明显是加锁的效率更高.</span>
<span style="color: #0000ff;">from</span> threading <span style="color: #0000ff;">import</span><span style="color: #000000;"> current_thread,Thread,Lock
</span><span style="color: #0000ff;">import</span><span style="color: #000000;"> os,time
</span><span style="color: #0000ff;">def</span><span style="color: #000000;"> task():
    time.sleep(</span>3<span style="color: #000000;">)
    </span><span style="color: #0000ff;">print</span>(<span style="color: #800000;">'</span><span style="color: #800000;">%s start to run</span><span style="color: #800000;">'</span> %<span style="color: #000000;">current_thread().getName())
    </span><span style="color: #0000ff;">global</span><span style="color: #000000;"> n
    temp</span>=<span style="color: #000000;">n
    time.sleep(</span>0.5<span style="color: #000000;">)
    n</span>=temp-1


<span style="color: #0000ff;">if</span> <span style="color: #800080;">__name__</span> == <span style="color: #800000;">'</span><span style="color: #800000;">__main__</span><span style="color: #800000;">'</span><span style="color: #000000;">:
    n</span>=100<span style="color: #000000;">
    lock</span>=<span style="color: #000000;">Lock()
    start_time</span>=<span style="color: #000000;">time.time()
    </span><span style="color: #0000ff;">for</span> i <span style="color: #0000ff;">in</span> range(100<span style="color: #000000;">):
        t</span>=Thread(target=<span style="color: #000000;">task)
        t.start()
        t.join()
    stop_time</span>=<span style="color: #000000;">time.time()
    </span><span style="color: #0000ff;">print</span>(<span style="color: #800000;">'</span><span style="color: #800000;">主:%s n:%s</span><span style="color: #800000;">'</span> %(stop_time-<span style="color: #000000;">start_time,n))

</span><span style="color: #800000;">'''</span><span style="color: #800000;">
Thread-1 start to run
Thread-2 start to run
......
Thread-100 start to run
主:350.6937336921692 n:0 #耗时是多么的恐怖
</span><span style="color: #800000;">'''</span><span style="color: #000000;">

）</span></pre>
</div>
<span class="cnblogs_code_collapse">互斥锁与join的区别</span></div>
<h4>死锁与递归锁</h4>
<p>进程也有死锁与递归锁，在进程那里忘记说了，放到这里一切说了额</p>
<p>所谓死锁： 是指两个或两个以上的进程或线程在执行过程中，因争夺资源而造成的一种互相等待的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程，如下就是死锁</p>
<div class="cnblogs_code" onclick="cnblogs_code_show('33ce2c0d-f6b7-493e-9ac9-aee9caa9c5da')"><img id="code_img_closed_33ce2c0d-f6b7-493e-9ac9-aee9caa9c5da" class="code_img_closed" src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="" /><img id="code_img_opened_33ce2c0d-f6b7-493e-9ac9-aee9caa9c5da" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('33ce2c0d-f6b7-493e-9ac9-aee9caa9c5da',event)" src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt="" />
<div id="cnblogs_code_open_33ce2c0d-f6b7-493e-9ac9-aee9caa9c5da" class="cnblogs_code_hide">
<pre><span style="color: #0000ff;">from</span> threading <span style="color: #0000ff;">import</span><span style="color: #000000;"> Lock as Lock
</span><span style="color: #0000ff;">import</span><span style="color: #000000;"> time
mutexA</span>=<span style="color: #000000;">Lock()
mutexA.acquire()
mutexA.acquire()
</span><span style="color: #0000ff;">print</span>(123<span style="color: #000000;">)
mutexA.release()
mutexA.release()</span></pre>
</div>
<span class="cnblogs_code_collapse">死锁</span></div>
<p>解决方法，递归锁，在Python中为了支持在同一线程中多次请求同一资源，python提供了可重入锁RLock。</p>
<p>这个RLock内部维护着一个Lock和一个counter变量，counter记录了acquire的次数，从而使得资源可以被多次require。直到一个线程所有的acquire都被release，其他的线程才能获得资源。上面的例子如果使用RLock代替Lock，则不会发生死锁：</p>
<div class="cnblogs_code" onclick="cnblogs_code_show('2e2336ce-9371-4408-8d8a-e9ede80440f9')"><img id="code_img_closed_2e2336ce-9371-4408-8d8a-e9ede80440f9" class="code_img_closed" src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="" /><img id="code_img_opened_2e2336ce-9371-4408-8d8a-e9ede80440f9" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('2e2336ce-9371-4408-8d8a-e9ede80440f9',event)" src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt="" />
<div id="cnblogs_code_open_2e2336ce-9371-4408-8d8a-e9ede80440f9" class="cnblogs_code_hide">
<pre><span style="color: #0000ff;">from</span> threading <span style="color: #0000ff;">import</span><span style="color: #000000;"> RLock as Lock
</span><span style="color: #0000ff;">import</span><span style="color: #000000;"> time
mutexA</span>=<span style="color: #000000;">Lock()
mutexA.acquire()
mutexA.acquire()
</span><span style="color: #0000ff;">print</span>(123<span style="color: #000000;">)
mutexA.release()
mutexA.release()</span></pre>
</div>
<span class="cnblogs_code_collapse">递归锁RLock</span></div>
<p>典型问题：科学家吃面</p>
<div class="cnblogs_code" onclick="cnblogs_code_show('32f2a403-7a10-44e3-82bf-4771f2dd2932')"><img id="code_img_closed_32f2a403-7a10-44e3-82bf-4771f2dd2932" class="code_img_closed" src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="" /><img id="code_img_opened_32f2a403-7a10-44e3-82bf-4771f2dd2932" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('32f2a403-7a10-44e3-82bf-4771f2dd2932',event)" src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt="" />
<div id="cnblogs_code_open_32f2a403-7a10-44e3-82bf-4771f2dd2932" class="cnblogs_code_hide">
<pre><span style="color: #0000ff;">import</span><span style="color: #000000;"> time
</span><span style="color: #0000ff;">from</span> threading <span style="color: #0000ff;">import</span><span style="color: #000000;"> Thread,Lock
noodle_lock </span>=<span style="color: #000000;"> Lock()
fork_lock </span>=<span style="color: #000000;"> Lock()
</span><span style="color: #0000ff;">def</span><span style="color: #000000;"> eat1(name):
    noodle_lock.acquire()
    </span><span style="color: #0000ff;">print</span>(<span style="color: #800000;">'</span><span style="color: #800000;">%s 抢到了面条</span><span style="color: #800000;">'</span>%<span style="color: #000000;">name)
    fork_lock.acquire()
    </span><span style="color: #0000ff;">print</span>(<span style="color: #800000;">'</span><span style="color: #800000;">%s 抢到了叉子</span><span style="color: #800000;">'</span>%<span style="color: #000000;">name)
    </span><span style="color: #0000ff;">print</span>(<span style="color: #800000;">'</span><span style="color: #800000;">%s 吃面</span><span style="color: #800000;">'</span>%<span style="color: #000000;">name)
    fork_lock.release()
    noodle_lock.release()

</span><span style="color: #0000ff;">def</span><span style="color: #000000;"> eat2(name):
    fork_lock.acquire()
    </span><span style="color: #0000ff;">print</span>(<span style="color: #800000;">'</span><span style="color: #800000;">%s 抢到了叉子</span><span style="color: #800000;">'</span> %<span style="color: #000000;"> name)
    time.sleep(</span>1<span style="color: #000000;">)
    noodle_lock.acquire()
    </span><span style="color: #0000ff;">print</span>(<span style="color: #800000;">'</span><span style="color: #800000;">%s 抢到了面条</span><span style="color: #800000;">'</span> %<span style="color: #000000;"> name)
    </span><span style="color: #0000ff;">print</span>(<span style="color: #800000;">'</span><span style="color: #800000;">%s 吃面</span><span style="color: #800000;">'</span> %<span style="color: #000000;"> name)
    noodle_lock.release()
    fork_lock.release()

</span><span style="color: #0000ff;">for</span> name <span style="color: #0000ff;">in</span> [<span style="color: #800000;">'</span><span style="color: #800000;">哪吒</span><span style="color: #800000;">'</span>,<span style="color: #800000;">'</span><span style="color: #800000;">egon</span><span style="color: #800000;">'</span>,<span style="color: #800000;">'</span><span style="color: #800000;">yuan</span><span style="color: #800000;">'</span><span style="color: #000000;">]:
    t1 </span>= Thread(target=eat1,args=<span style="color: #000000;">(name,))
    t2 </span>= Thread(target=eat2,args=<span style="color: #000000;">(name,))
    t1.start()
    t2.start()</span></pre>
</div>
<span class="cnblogs_code_collapse">死锁问题</span></div>
<div class="cnblogs_code" onclick="cnblogs_code_show('56d8fc13-64af-4b51-bdbf-a44919c25235')"><img id="code_img_closed_56d8fc13-64af-4b51-bdbf-a44919c25235" class="code_img_closed" src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="" /><img id="code_img_opened_56d8fc13-64af-4b51-bdbf-a44919c25235" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('56d8fc13-64af-4b51-bdbf-a44919c25235',event)" src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt="" />
<div id="cnblogs_code_open_56d8fc13-64af-4b51-bdbf-a44919c25235" class="cnblogs_code_hide">
<pre><span style="color: #0000ff;">import</span><span style="color: #000000;"> time
</span><span style="color: #0000ff;">from</span> threading <span style="color: #0000ff;">import</span><span style="color: #000000;"> Thread,RLock
fork_lock </span>= noodle_lock =<span style="color: #000000;"> RLock()
</span><span style="color: #0000ff;">def</span><span style="color: #000000;"> eat1(name):
    noodle_lock.acquire()
    </span><span style="color: #0000ff;">print</span>(<span style="color: #800000;">'</span><span style="color: #800000;">%s 抢到了面条</span><span style="color: #800000;">'</span>%<span style="color: #000000;">name)
    fork_lock.acquire()
    </span><span style="color: #0000ff;">print</span>(<span style="color: #800000;">'</span><span style="color: #800000;">%s 抢到了叉子</span><span style="color: #800000;">'</span>%<span style="color: #000000;">name)
    </span><span style="color: #0000ff;">print</span>(<span style="color: #800000;">'</span><span style="color: #800000;">%s 吃面</span><span style="color: #800000;">'</span>%<span style="color: #000000;">name)
    fork_lock.release()
    noodle_lock.release()

</span><span style="color: #0000ff;">def</span><span style="color: #000000;"> eat2(name):
    fork_lock.acquire()
    </span><span style="color: #0000ff;">print</span>(<span style="color: #800000;">'</span><span style="color: #800000;">%s 抢到了叉子</span><span style="color: #800000;">'</span> %<span style="color: #000000;"> name)
    time.sleep(</span>1<span style="color: #000000;">)
    noodle_lock.acquire()
    </span><span style="color: #0000ff;">print</span>(<span style="color: #800000;">'</span><span style="color: #800000;">%s 抢到了面条</span><span style="color: #800000;">'</span> %<span style="color: #000000;"> name)
    </span><span style="color: #0000ff;">print</span>(<span style="color: #800000;">'</span><span style="color: #800000;">%s 吃面</span><span style="color: #800000;">'</span> %<span style="color: #000000;"> name)
    noodle_lock.release()
    fork_lock.release()

</span><span style="color: #0000ff;">for</span> name <span style="color: #0000ff;">in</span> [<span style="color: #800000;">'</span><span style="color: #800000;">哪吒</span><span style="color: #800000;">'</span>,<span style="color: #800000;">'</span><span style="color: #800000;">egon</span><span style="color: #800000;">'</span>,<span style="color: #800000;">'</span><span style="color: #800000;">yuan</span><span style="color: #800000;">'</span><span style="color: #000000;">]:
    t1 </span>= Thread(target=eat1,args=<span style="color: #000000;">(name,))
    t2 </span>= Thread(target=eat2,args=<span style="color: #000000;">(name,))
    t1.start()
    t2.start()</span></pre>
</div>
<span class="cnblogs_code_collapse">递归锁解决死锁问题</span></div>
<div style="text-align: right;"><a href="#_labelTop">回到顶部</a><a name="_label16"></a></div>
<h3>线程队列</h3>
<p>queue队列 ：使用import queue，用法与进程Queue一样</p>
<p>queue is especially useful in threaded programming when information must be exchanged safely between multiple threads.</p>
<dl class="class"><dt id="queue.Queue"><strong><em class="property">class&nbsp;</em><code class="descclassname">queue.</code><code class="descname">Queue</code><span class="sig-paren">(<em>maxsize=0</em><span class="sig-paren">) #先进先出</span></span></strong></dt><dt></dt></dl>
<div class="cnblogs_code" onclick="cnblogs_code_show('d8cf53cc-1cb7-4b4d-bf6f-0ef1a9a4a5e7')"><img id="code_img_closed_d8cf53cc-1cb7-4b4d-bf6f-0ef1a9a4a5e7" class="code_img_closed" src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="" /><img id="code_img_opened_d8cf53cc-1cb7-4b4d-bf6f-0ef1a9a4a5e7" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('d8cf53cc-1cb7-4b4d-bf6f-0ef1a9a4a5e7',event)" src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt="" />
<div id="cnblogs_code_open_d8cf53cc-1cb7-4b4d-bf6f-0ef1a9a4a5e7" class="cnblogs_code_hide">
<pre><span style="color: #0000ff;">import</span><span style="color: #000000;"> queue

q</span>=<span style="color: #000000;">queue.Queue()
q.put(</span><span style="color: #800000;">'</span><span style="color: #800000;">first</span><span style="color: #800000;">'</span><span style="color: #000000;">)
q.put(</span><span style="color: #800000;">'</span><span style="color: #800000;">second</span><span style="color: #800000;">'</span><span style="color: #000000;">)
q.put(</span><span style="color: #800000;">'</span><span style="color: #800000;">third</span><span style="color: #800000;">'</span><span style="color: #000000;">)

</span><span style="color: #0000ff;">print</span><span style="color: #000000;">(q.get())
</span><span style="color: #0000ff;">print</span><span style="color: #000000;">(q.get())
</span><span style="color: #0000ff;">print</span><span style="color: #000000;">(q.get())
</span><span style="color: #800000;">'''</span><span style="color: #800000;">
结果(先进先出):
first
second
third
</span><span style="color: #800000;">'''</span></pre>
</div>
<span class="cnblogs_code_collapse">先进先出</span></div>
<p><strong><em class="property">class&nbsp;</em><code class="descclassname">queue.</code><code class="descname">LifoQueue</code><span class="sig-paren">(<em>maxsize=0</em><span class="sig-paren">) #last in fisrt out</span></span></strong></p>
<div class="cnblogs_code" onclick="cnblogs_code_show('fdcedfe6-b33e-4c37-8eb4-86c04efaa9a1')"><img id="code_img_closed_fdcedfe6-b33e-4c37-8eb4-86c04efaa9a1" class="code_img_closed" src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="" /><img id="code_img_opened_fdcedfe6-b33e-4c37-8eb4-86c04efaa9a1" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('fdcedfe6-b33e-4c37-8eb4-86c04efaa9a1',event)" src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt="" />
<div id="cnblogs_code_open_fdcedfe6-b33e-4c37-8eb4-86c04efaa9a1" class="cnblogs_code_hide">
<pre><span style="color: #0000ff;">import</span><span style="color: #000000;"> queue

q</span>=<span style="color: #000000;">queue.LifoQueue()
q.put(</span><span style="color: #800000;">'</span><span style="color: #800000;">first</span><span style="color: #800000;">'</span><span style="color: #000000;">)
q.put(</span><span style="color: #800000;">'</span><span style="color: #800000;">second</span><span style="color: #800000;">'</span><span style="color: #000000;">)
q.put(</span><span style="color: #800000;">'</span><span style="color: #800000;">third</span><span style="color: #800000;">'</span><span style="color: #000000;">)

</span><span style="color: #0000ff;">print</span><span style="color: #000000;">(q.get())
</span><span style="color: #0000ff;">print</span><span style="color: #000000;">(q.get())
</span><span style="color: #0000ff;">print</span><span style="color: #000000;">(q.get())
</span><span style="color: #800000;">'''</span><span style="color: #800000;">
结果(后进先出):
third
second
first
</span><span style="color: #800000;">'''</span></pre>
</div>
<span class="cnblogs_code_collapse">后进先出</span></div>
<p><strong><em class="property">class&nbsp;</em><code class="descclassname">queue.</code><code class="descname">PriorityQueue</code><span class="sig-paren">(<em>maxsize=0</em><span class="sig-paren">) #存储数据时可设置优先级的队列</span></span></strong></p>
<div class="cnblogs_code" onclick="cnblogs_code_show('5c1846d7-735d-4909-b859-17ba8480f94f')"><img id="code_img_closed_5c1846d7-735d-4909-b859-17ba8480f94f" class="code_img_closed" src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="" /><img id="code_img_opened_5c1846d7-735d-4909-b859-17ba8480f94f" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('5c1846d7-735d-4909-b859-17ba8480f94f',event)" src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt="" />
<div id="cnblogs_code_open_5c1846d7-735d-4909-b859-17ba8480f94f" class="cnblogs_code_hide">
<pre><span style="color: #0000ff;">import</span><span style="color: #000000;"> queue

q</span>=<span style="color: #000000;">queue.PriorityQueue()
</span><span style="color: #008000;">#</span><span style="color: #008000;">put进入一个元组,元组的第一个元素是优先级(通常是数字,也可以是非数字之间的比较),数字越小优先级越高</span>
q.put((20,<span style="color: #800000;">'</span><span style="color: #800000;">a</span><span style="color: #800000;">'</span><span style="color: #000000;">))
q.put((</span>10,<span style="color: #800000;">'</span><span style="color: #800000;">b</span><span style="color: #800000;">'</span><span style="color: #000000;">))
q.put((</span>30,<span style="color: #800000;">'</span><span style="color: #800000;">c</span><span style="color: #800000;">'</span><span style="color: #000000;">))

</span><span style="color: #0000ff;">print</span><span style="color: #000000;">(q.get())
</span><span style="color: #0000ff;">print</span><span style="color: #000000;">(q.get())
</span><span style="color: #0000ff;">print</span><span style="color: #000000;">(q.get())
</span><span style="color: #800000;">'''</span><span style="color: #800000;">
结果(数字越小优先级越高,优先级高的优先出队):
(10, 'b')
(20, 'a')
(30, 'c')
</span><span style="color: #800000;">'''</span></pre>
</div>
<span class="cnblogs_code_collapse">优先级队列</span></div>
<div class="cnblogs_code" onclick="cnblogs_code_show('b148ee8e-6c38-4742-947b-6ba9852ed601')"><img id="code_img_closed_b148ee8e-6c38-4742-947b-6ba9852ed601" class="code_img_closed" src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="" /><img id="code_img_opened_b148ee8e-6c38-4742-947b-6ba9852ed601" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('b148ee8e-6c38-4742-947b-6ba9852ed601',event)" src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt="" />
<div id="cnblogs_code_open_b148ee8e-6c38-4742-947b-6ba9852ed601" class="cnblogs_code_hide">
<pre>Constructor <span style="color: #0000ff;">for</span> a priority queue. maxsize <span style="color: #0000ff;">is</span> an integer that sets the upperbound limit on the number of items that can be placed <span style="color: #0000ff;">in</span> the queue. Insertion will block once this size has been reached, until queue items are consumed. If maxsize <span style="color: #0000ff;">is</span> less than <span style="color: #0000ff;">or</span> equal to zero, the queue size <span style="color: #0000ff;">is</span><span style="color: #000000;"> infinite.

The lowest valued entries are retrieved first (the lowest valued entry </span><span style="color: #0000ff;">is</span> the one returned by sorted(list(entries))[0]). A typical pattern <span style="color: #0000ff;">for</span> entries <span style="color: #0000ff;">is</span> a tuple <span style="color: #0000ff;">in</span><span style="color: #000000;"> the form: (priority_number, data).

exception queue.Empty
Exception raised when non</span>-blocking get() (<span style="color: #0000ff;">or</span> get_nowait()) <span style="color: #0000ff;">is</span> called on a Queue object which <span style="color: #0000ff;">is</span><span style="color: #000000;"> empty.

exception queue.Full
Exception raised when non</span>-blocking put() (<span style="color: #0000ff;">or</span> put_nowait()) <span style="color: #0000ff;">is</span> called on a Queue object which <span style="color: #0000ff;">is</span><span style="color: #000000;"> full.

Queue.qsize()
Queue.empty() </span><span style="color: #008000;">#</span><span style="color: #008000;">return True if empty  </span>
Queue.full() <span style="color: #008000;">#</span><span style="color: #008000;"> return True if full </span>
Queue.put(item, block=True, timeout=<span style="color: #000000;">None)
Put item into the queue. If optional args block </span><span style="color: #0000ff;">is</span> true <span style="color: #0000ff;">and</span> timeout <span style="color: #0000ff;">is</span> None (the default), block <span style="color: #0000ff;">if</span> necessary until a free slot <span style="color: #0000ff;">is</span> available. If timeout <span style="color: #0000ff;">is</span> a positive number, it blocks at most timeout seconds <span style="color: #0000ff;">and</span> raises the Full exception <span style="color: #0000ff;">if</span> no free slot was available within that time. Otherwise (block <span style="color: #0000ff;">is</span> false), put an item on the queue <span style="color: #0000ff;">if</span> a free slot <span style="color: #0000ff;">is</span> immediately available, <span style="color: #0000ff;">else</span> <span style="color: #0000ff;">raise</span> the Full exception (timeout <span style="color: #0000ff;">is</span> ignored <span style="color: #0000ff;">in</span><span style="color: #000000;"> that case).

Queue.put_nowait(item)
Equivalent to put(item, False).

Queue.get(block</span>=True, timeout=<span style="color: #000000;">None)
Remove </span><span style="color: #0000ff;">and</span> <span style="color: #0000ff;">return</span> an item <span style="color: #0000ff;">from</span> the queue. If optional args block <span style="color: #0000ff;">is</span> true <span style="color: #0000ff;">and</span> timeout <span style="color: #0000ff;">is</span> None (the default), block <span style="color: #0000ff;">if</span> necessary until an item <span style="color: #0000ff;">is</span> available. If timeout <span style="color: #0000ff;">is</span> a positive number, it blocks at most timeout seconds <span style="color: #0000ff;">and</span> raises the Empty exception <span style="color: #0000ff;">if</span> no item was available within that time. Otherwise (block <span style="color: #0000ff;">is</span> false), <span style="color: #0000ff;">return</span> an item <span style="color: #0000ff;">if</span> one <span style="color: #0000ff;">is</span> immediately available, <span style="color: #0000ff;">else</span> <span style="color: #0000ff;">raise</span> the Empty exception (timeout <span style="color: #0000ff;">is</span> ignored <span style="color: #0000ff;">in</span><span style="color: #000000;"> that case).

Queue.get_nowait()
Equivalent to get(False).

Two methods are offered to support tracking whether enqueued tasks have been fully processed by daemon consumer threads.

Queue.task_done()
Indicate that a formerly enqueued task </span><span style="color: #0000ff;">is</span> complete. Used by queue consumer threads. For each get() used to fetch a task, a subsequent call to task_done() tells the queue that the processing on the task <span style="color: #0000ff;">is</span><span style="color: #000000;"> complete.

If a join() </span><span style="color: #0000ff;">is</span> currently blocking, it will resume when all items have been processed (meaning that a task_done() call was received <span style="color: #0000ff;">for</span><span style="color: #000000;"> every item that had been put() into the queue).

Raises a ValueError </span><span style="color: #0000ff;">if</span> called more times than there were items placed <span style="color: #0000ff;">in</span><span style="color: #000000;"> the queue.

Queue.join() block直到queue被消费完毕</span></pre>
</div>
<span class="cnblogs_code_collapse">更多方法说明</span></div>
<div style="text-align: right;"><a href="#_labelTop">回到顶部</a><a name="_label17"></a></div>
<h3>Python标准模块--concurrent.futures</h3>
<p><strong><a href="https://docs.python.org/dev/library/concurrent.futures.html" target="_blank">https://docs.python.org/dev/library/concurrent.futures.html</a></strong></p>
<div class="cnblogs_code">
<pre><span style="color: #008000;">#</span><span style="color: #008000;">1 介绍</span>
<span style="color: #000000;">concurrent.futures模块提供了高度封装的异步调用接口
ThreadPoolExecutor：线程池，提供异步调用
ProcessPoolExecutor: 进程池，提供异步调用
Both implement the same interface, which </span><span style="color: #0000ff;">is</span> defined by the abstract Executor <span style="color: #0000ff;">class</span><span style="color: #000000;">.

</span><span style="color: #008000;">#</span><span style="color: #008000;">2 基本方法</span><span style="color: #008000;">
#</span><span style="color: #008000;">submit(fn, *args, **kwargs)</span>
<span style="color: #000000;">异步提交任务

</span><span style="color: #008000;">#</span><span style="color: #008000;">map(func, *iterables, timeout=None, chunksize=1) </span>
<span style="color: #000000;">取代for循环submit的操作

</span><span style="color: #008000;">#</span><span style="color: #008000;">shutdown(wait=True) </span>
相当于进程池的pool.close()+<span style="color: #000000;">pool.join()操作
wait</span>=<span style="color: #000000;">True，等待池内所有任务执行完毕回收完资源后才继续
wait</span>=<span style="color: #000000;">False，立即返回，并不会等待池内的任务执行完毕
但不管wait参数为何值，整个程序都会等到所有任务执行完毕
submit和map必须在shutdown之前

</span><span style="color: #008000;">#</span><span style="color: #008000;">result(timeout=None)</span>
<span style="color: #000000;">取得结果

</span><span style="color: #008000;">#</span><span style="color: #008000;">add_done_callback(fn)</span>
回调函数<br /><br /><span style="color: #008000;"># done()</span><br />判断某一个线程是否完成<br /><br /><span style="color: #008000;"># cancle()</span><br />取消某个任务<br /><br /><br /></pre>
</div>
<div class="cnblogs_code" onclick="cnblogs_code_show('c434c5a3-c904-4946-906c-5adab0ade85a')"><img id="code_img_closed_c434c5a3-c904-4946-906c-5adab0ade85a" class="code_img_closed" src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="" /><img id="code_img_opened_c434c5a3-c904-4946-906c-5adab0ade85a" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('c434c5a3-c904-4946-906c-5adab0ade85a',event)" src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt="" />
<div id="cnblogs_code_open_c434c5a3-c904-4946-906c-5adab0ade85a" class="cnblogs_code_hide">
<pre><span style="color: #008000;">#</span><span style="color: #008000;">介绍</span>
The ProcessPoolExecutor <span style="color: #0000ff;">class</span> <span style="color: #0000ff;">is</span> an Executor subclass that uses a pool of processes to execute calls asynchronously. ProcessPoolExecutor uses the multiprocessing module, which allows it to side-step the Global Interpreter Lock but also means that only picklable objects can be executed <span style="color: #0000ff;">and</span><span style="color: #000000;"> returned.

</span><span style="color: #0000ff;">class</span> concurrent.futures.ProcessPoolExecutor(max_workers=None, mp_context=<span style="color: #000000;">None)
An Executor subclass that executes calls asynchronously using a pool of at most max_workers processes. If max_workers </span><span style="color: #0000ff;">is</span> None <span style="color: #0000ff;">or</span> <span style="color: #0000ff;">not</span> given, it will default to the number of processors on the machine. If max_workers <span style="color: #0000ff;">is</span> lower <span style="color: #0000ff;">or</span><span style="color: #000000;"> equal to 0, then a ValueError will be raised.


</span><span style="color: #008000;">#</span><span style="color: #008000;">用法</span>
<span style="color: #0000ff;">from</span> concurrent.futures <span style="color: #0000ff;">import</span><span style="color: #000000;"> ThreadPoolExecutor,ProcessPoolExecutor

</span><span style="color: #0000ff;">import</span><span style="color: #000000;"> os,time,random
</span><span style="color: #0000ff;">def</span><span style="color: #000000;"> task(n):
    </span><span style="color: #0000ff;">print</span>(<span style="color: #800000;">'</span><span style="color: #800000;">%s is runing</span><span style="color: #800000;">'</span> %<span style="color: #000000;">os.getpid())
    time.sleep(random.randint(</span>1,3<span style="color: #000000;">))
    </span><span style="color: #0000ff;">return</span> n**2

<span style="color: #0000ff;">if</span> <span style="color: #800080;">__name__</span> == <span style="color: #800000;">'</span><span style="color: #800000;">__main__</span><span style="color: #800000;">'</span><span style="color: #000000;">:

    executor</span>=ProcessPoolExecutor(max_workers=3<span style="color: #000000;">)

    futures</span>=<span style="color: #000000;">[]
    </span><span style="color: #0000ff;">for</span> i <span style="color: #0000ff;">in</span> range(11<span style="color: #000000;">):
        future</span>=<span style="color: #000000;">executor.submit(task,i)
        futures.append(future)
    executor.shutdown(True)
    </span><span style="color: #0000ff;">print</span>(<span style="color: #800000;">'</span><span style="color: #800000;">+++&gt;</span><span style="color: #800000;">'</span><span style="color: #000000;">)
    </span><span style="color: #0000ff;">for</span> future <span style="color: #0000ff;">in</span><span style="color: #000000;"> futures:
        </span><span style="color: #0000ff;">print</span>(future.result())</pre>
</div>
<span class="cnblogs_code_collapse">ProcessPoolExecutor</span></div>
<div class="cnblogs_code" onclick="cnblogs_code_show('c6114d66-aede-4cb0-871c-562d2a5e7d5a')"><img id="code_img_closed_c6114d66-aede-4cb0-871c-562d2a5e7d5a" class="code_img_closed" src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="" /><img id="code_img_opened_c6114d66-aede-4cb0-871c-562d2a5e7d5a" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('c6114d66-aede-4cb0-871c-562d2a5e7d5a',event)" src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt="" />
<div id="cnblogs_code_open_c6114d66-aede-4cb0-871c-562d2a5e7d5a" class="cnblogs_code_hide">
<pre><span style="color: #008000;">#</span><span style="color: #008000;">介绍</span>
ThreadPoolExecutor <span style="color: #0000ff;">is</span><span style="color: #000000;"> an Executor subclass that uses a pool of threads to execute calls asynchronously.
</span><span style="color: #0000ff;">class</span> concurrent.futures.ThreadPoolExecutor(max_workers=None, thread_name_prefix=<span style="color: #800000;">''</span><span style="color: #000000;">)
An Executor subclass that uses a pool of at most max_workers threads to execute calls asynchronously.

Changed </span><span style="color: #0000ff;">in</span> version 3.5: If max_workers <span style="color: #0000ff;">is</span> None <span style="color: #0000ff;">or</span> <span style="color: #0000ff;">not</span> given, it will default to the number of processors on the machine, multiplied by 5, assuming that ThreadPoolExecutor <span style="color: #0000ff;">is</span> often used to overlap I/O instead of CPU work <span style="color: #0000ff;">and</span> the number of workers should be higher than the number of workers <span style="color: #0000ff;">for</span><span style="color: #000000;"> ProcessPoolExecutor.

New </span><span style="color: #0000ff;">in</span> version 3.6: The thread_name_prefix argument was added to allow users to control the threading.Thread names <span style="color: #0000ff;">for</span> worker threads created by the pool <span style="color: #0000ff;">for</span><span style="color: #000000;"> easier debugging.

</span><span style="color: #008000;">#</span><span style="color: #008000;">用法</span>
与ProcessPoolExecutor相同</pre>
</div>
<span class="cnblogs_code_collapse">ThreadPoolExecutor</span></div>
<div class="cnblogs_code" onclick="cnblogs_code_show('b0a52570-5a24-4f29-95d4-37de5107d144')"><img id="code_img_closed_b0a52570-5a24-4f29-95d4-37de5107d144" class="code_img_closed" src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="" /><img id="code_img_opened_b0a52570-5a24-4f29-95d4-37de5107d144" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('b0a52570-5a24-4f29-95d4-37de5107d144',event)" src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt="" />
<div id="cnblogs_code_open_b0a52570-5a24-4f29-95d4-37de5107d144" class="cnblogs_code_hide">
<pre><span style="color: #0000ff;">from</span> concurrent.futures <span style="color: #0000ff;">import</span><span style="color: #000000;"> ThreadPoolExecutor,ProcessPoolExecutor

</span><span style="color: #0000ff;">import</span><span style="color: #000000;"> os,time,random
</span><span style="color: #0000ff;">def</span><span style="color: #000000;"> task(n):
    </span><span style="color: #0000ff;">print</span>(<span style="color: #800000;">'</span><span style="color: #800000;">%s is runing</span><span style="color: #800000;">'</span> %<span style="color: #000000;">os.getpid())
    time.sleep(random.randint(</span>1,3<span style="color: #000000;">))
    </span><span style="color: #0000ff;">return</span> n**2

<span style="color: #0000ff;">if</span> <span style="color: #800080;">__name__</span> == <span style="color: #800000;">'</span><span style="color: #800000;">__main__</span><span style="color: #800000;">'</span><span style="color: #000000;">:

    executor</span>=ThreadPoolExecutor(max_workers=3<span style="color: #000000;">)

    </span><span style="color: #008000;">#</span><span style="color: #008000;"> for i in range(11):</span>
    <span style="color: #008000;">#</span><span style="color: #008000;">     future=executor.submit(task,i)</span>
<span style="color: #000000;">
    executor.map(task,range(</span>1,12)) <span style="color: #008000;">#</span><span style="color: #008000;">map取代了for+submit</span></pre>
</div>
<span class="cnblogs_code_collapse">map的用法</span></div>
<div class="cnblogs_code" onclick="cnblogs_code_show('61357f79-be7d-4392-a242-fe5855b8ef68')"><img id="code_img_closed_61357f79-be7d-4392-a242-fe5855b8ef68" class="code_img_closed" src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="" /><img id="code_img_opened_61357f79-be7d-4392-a242-fe5855b8ef68" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('61357f79-be7d-4392-a242-fe5855b8ef68',event)" src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt="" />
<div id="cnblogs_code_open_61357f79-be7d-4392-a242-fe5855b8ef68" class="cnblogs_code_hide">
<pre><span style="color: #0000ff;">from</span> concurrent.futures <span style="color: #0000ff;">import</span><span style="color: #000000;"> ThreadPoolExecutor,ProcessPoolExecutor
</span><span style="color: #0000ff;">from</span> multiprocessing <span style="color: #0000ff;">import</span><span style="color: #000000;"> Pool
</span><span style="color: #0000ff;">import</span><span style="color: #000000;"> requests
</span><span style="color: #0000ff;">import</span><span style="color: #000000;"> json
</span><span style="color: #0000ff;">import</span><span style="color: #000000;"> os

</span><span style="color: #0000ff;">def</span><span style="color: #000000;"> get_page(url):
    </span><span style="color: #0000ff;">print</span>(<span style="color: #800000;">'</span><span style="color: #800000;">&lt;进程%s&gt; get %s</span><span style="color: #800000;">'</span> %<span style="color: #000000;">(os.getpid(),url))
    respone</span>=<span style="color: #000000;">requests.get(url)
    </span><span style="color: #0000ff;">if</span> respone.status_code == 200<span style="color: #000000;">:
        </span><span style="color: #0000ff;">return</span> {<span style="color: #800000;">'</span><span style="color: #800000;">url</span><span style="color: #800000;">'</span>:url,<span style="color: #800000;">'</span><span style="color: #800000;">text</span><span style="color: #800000;">'</span><span style="color: #000000;">:respone.text}

</span><span style="color: #0000ff;">def</span><span style="color: #000000;"> parse_page(res):
    res</span>=<span style="color: #000000;">res.result()
    </span><span style="color: #0000ff;">print</span>(<span style="color: #800000;">'</span><span style="color: #800000;">&lt;进程%s&gt; parse %s</span><span style="color: #800000;">'</span> %(os.getpid(),res[<span style="color: #800000;">'</span><span style="color: #800000;">url</span><span style="color: #800000;">'</span><span style="color: #000000;">]))
    parse_res</span>=<span style="color: #800000;">'</span><span style="color: #800000;">url:&lt;%s&gt; size:[%s]\n</span><span style="color: #800000;">'</span> %(res[<span style="color: #800000;">'</span><span style="color: #800000;">url</span><span style="color: #800000;">'</span>],len(res[<span style="color: #800000;">'</span><span style="color: #800000;">text</span><span style="color: #800000;">'</span><span style="color: #000000;">]))
    with open(</span><span style="color: #800000;">'</span><span style="color: #800000;">db.txt</span><span style="color: #800000;">'</span>,<span style="color: #800000;">'</span><span style="color: #800000;">a</span><span style="color: #800000;">'</span><span style="color: #000000;">) as f:
        f.write(parse_res)


</span><span style="color: #0000ff;">if</span> <span style="color: #800080;">__name__</span> == <span style="color: #800000;">'</span><span style="color: #800000;">__main__</span><span style="color: #800000;">'</span><span style="color: #000000;">:
    urls</span>=<span style="color: #000000;">[
        </span><span style="color: #800000;">'</span><span style="color: #800000;">https://www.baidu.com</span><span style="color: #800000;">'</span><span style="color: #000000;">,
        </span><span style="color: #800000;">'</span><span style="color: #800000;">https://www.python.org</span><span style="color: #800000;">'</span><span style="color: #000000;">,
        </span><span style="color: #800000;">'</span><span style="color: #800000;">https://www.openstack.org</span><span style="color: #800000;">'</span><span style="color: #000000;">,
        </span><span style="color: #800000;">'</span><span style="color: #800000;">https://help.github.com/</span><span style="color: #800000;">'</span><span style="color: #000000;">,
        </span><span style="color: #800000;">'</span><span style="color: #800000;">http://www.sina.com.cn/</span><span style="color: #800000;">'</span><span style="color: #000000;">
    ]

    </span><span style="color: #008000;">#</span><span style="color: #008000;"> p=Pool(3)</span>
    <span style="color: #008000;">#</span><span style="color: #008000;"> for url in urls:</span>
    <span style="color: #008000;">#</span><span style="color: #008000;">     p.apply_async(get_page,args=(url,),callback=pasrse_page)</span>
    <span style="color: #008000;">#</span><span style="color: #008000;"> p.close()</span>
    <span style="color: #008000;">#</span><span style="color: #008000;"> p.join()</span>
<span style="color: #000000;">
    p</span>=ProcessPoolExecutor(3<span style="color: #000000;">)
    </span><span style="color: #0000ff;">for</span> url <span style="color: #0000ff;">in</span><span style="color: #000000;"> urls:
        p.submit(get_page,url).add_done_callback(parse_page) </span><span style="color: #008000;">#</span><span style="color: #008000;">parse_page拿到的是一个future对象obj，需要用obj.result()拿到结果</span></pre>
</div>
<span class="cnblogs_code_collapse">回调函数</span></div>
<p>&nbsp;</p>
</div>
</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
		</div>
		<div class="postDesc">posted @ 
<span id="post-date">2018-01-21 15:22</span>&nbsp;
<a href="https://www.cnblogs.com/Eva-J/">Eva_J</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditArticles.aspx?postid=8306047" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(8306047);return false;">收藏</a></div>
	</div>
	
	
</div><!--end: topics 文章、评论容器-->
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 250832, cb_blogApp = 'Eva-J', cb_blogUserGuid = '4997edaa-857b-e511-9fc1-ac853d9f53cc';
    var cb_entryId = 8306047, cb_entryCreatedDate = '2018-01-21 15:22', cb_postType = 2; 
    loadViewCount(cb_entryId);
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div></div>


	</div><!--end: topicList 文章列表容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

			<div id="calendar"><div id="calendar"><div id="blog-calendar" style="display:none"></div></div>                
                    <script>loadBlogDefaultCalendar();</script></div>
			
			<DIV id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</DIV>
			
		</div><!--end: sideBarMain -->
		<div class="clear"></div>
		<div id="footer">
			<!--done-->
Copyright &copy; 2020 Eva_J
<br /><span id="poweredby">Powered by .NET Core 3.1.1 on Linux</span>



		</div><!--end: footer -->
	</div><!--end: sideBar 侧边栏容器 -->
</div><!--end: home 自定义的最大容器 -->
</center>


    
</body>
</html>